#!/bin/sh

set -e -u
#set -x

umask 002

NL='
'
readonly NL

log() {
  printf '%s\n' "$*" >&2
}

err() {
  log "$@"
  exit 1
}

cmd_log() {
  log "$@"
  "$@"
}

get_config() {
  VM="$1"
  readonly VM

  coreos=
  debian=
  centos=
  unset -v vm_memory
  data_vol_size=
  data_vol_inode_ratio=
  data_vol_reserved_percent=
  unset -v ssh_host_port
  ssh_custom_agent=
  ssh_forward_agent=
  ssh_proxy_port=
  boot_script_custom=
  lsyncd_config=

  case "$VM" in
  thip )
    coreos=1
    vm_memory=2048M
    ssh_host_port=2222
    lsyncd_config="\
sync {
   default.rsync,
   source = '${HOME}/p',
   target = '${VM}:/vol/projects',
   exclude = '/bergenrabbit',
   delay = 1,
   rsync = {
      perms = true,
      chmod = 'D775,F664,Fugo+X'
   }
}
"
    ;;

  test-br )
    debian=1
    vm_memory=1024M
    data_vol_size=145G
    data_vol_inode_ratio=65536
    data_vol_reserved_percent=1
    ssh_host_port=15022
    ssh_proxy_port=15080
    ssh_custom_agent=/run/tliset-ssh-agent/set-bergenrabbit.sock
    ssh_forward_agent=1
    boot_script_custom='
cmd_log mkdir -p -m 0755 /br
cmd_log mount -t ext4 /dev/vdb /br
'
    lsyncd_config="\
sync {
   default.rsync,
   source = '${HOME}/p/bergenrabbit',
   target = 'root@${VM}:/br/opt/2',
   exclude = { '/compiled', '/gosrc' },
   delay = 1,
   rsync = {
      perms = true,
      owner = true,
      group = true,
      chown = 'root:root',
      chmod = 'D755,F+rX,Fg-w',
   }
}
sync {
   default.rsync,
   source = '${HOME}/p/bergenrabbit/gosrc',
   target = 'br-build@${VM}:/br/opt/2/gosrc',
   delay = 1,
   rsync = {
      perms = true,
      chmod = 'D2775,F+rX'
   }
}
"
    ;;

  centos )
    centos=1
    vm_memory=1024M
    ssh_host_port=15122
    ;;

  * ) err "unknown VN name - '${VM}'" ;;
  esac

  readonly centos coreos debian
  readonly vm_memory
  readonly data_vol_size
  readonly ssh_host_port

  if is_coreos; then
    readonly channel=beta
    readonly base_url="https://${channel}.release.core-os.net/amd64-usr/current"
    readonly key_uid='CoreOS Buildbot (Offical Builds) <buildbot@coreos.com>'
    readonly key_url="https://coreos.com/security/image-signing-key/CoreOS_Image_Signing_Key.pem"
    readonly prefix="coreos_production_qemu"
  fi

  readonly user_unit_dir="${XDG_RUNTIME_DIR}/systemd/user"
  readonly user_unit="${VM}.service"
  readonly user_unit_path="${user_unit_dir}/${user_unit}"

  if is_coreos; then
    readonly dir=/vol/vm/coreos
    readonly ssh_user=core
  elif is_debian; then
    readonly dir=/vol/vm/debian
    readonly ssh_user=root
  elif is_centos; then
    readonly dir=/vol/vm/centos
    readonly ssh_user=root
  fi

  readonly rundir="${XDG_RUNTIME_DIR}/vm/${VM}"

  main_vol="${VM}-main.img"
  data_vol_path="/vol/data/${VM}-data.img"
  if is_debian; then
    main_vol="${VM}-main.qcow2"
  fi

  readonly main_vol data_vol_path

  if test -n "${ssh_custom_agent}"; then
    SSH_AUTH_SOCK="${ssh_custom_agent}";
    export SSH_AUTH_SOCK
  fi
}

is_vm() {
  local name
  name="$1"
  test "x${name}" = "x${VM}"
}

is_centos() {
  test -n "${centos}"
}

is_coreos() {
  test -n "${coreos}"
}

is_debian() {
  test -n "${debian}"
}

# Append to ecmd space-separated arguments with spaces and other special
# characters escaped.
earg() {
  local arg do_escape escaped before_quote
  for arg in "$@"; do
    # Treat '=' as special only in the first argument
    do_escape=
    if test -z "${ecmd}"; then
      case "${arg}" in
      "" | *[!A-Z0-9a-z_.,/:-]* ) do_escape=1 ;;
      esac
    else
      case "${arg}" in
      "" | *[!=A-Z0-9a-z_.,/:-]* ) do_escape=1 ;;
      esac
    fi
    if test -n "${do_escape}"; then
      escaped=
      while : ; do
        before_quote="${arg%%\'*}"
        if test "x${arg}" = "x${before_quote}"; then
          break
        fi
        escaped="${escaped}${before_quote}'\\''"
        arg="${arg#*\'}"
      done
      arg="'${escaped}${arg}'"
    fi
    ecmd="${ecmd}${ecmd:+ }${arg}"
  done
}

fetch_as_tmp_file() {
  local file
  file="$1"
  curl -o "${file}.tmp" "${base_url}/${file}"
}

check_gpg_signature() {
  local path="$1" sig="$2"
  local gpg_output
  log "Checking ${path} signature"
  gpg_output="$(gpg --batch --verify "${sig}" "${path}" 2>&1 || true)"
  if ! printf '%s\n' "${gpg_output}" | grep -q "^gpg: Good signature from "; then
    err "${gpg_output}"
  fi
}

setup_vm_images() {
  if ! test -d "${dir}"; then
    mkdir -p "${dir}"
  fi

  if is_centos; then
    setup_centos_images
  fi
  if is_coreos; then
    setup_coreos_images
  fi
  if is_debian; then
    setup_debian_images
  fi

  if test -n "${data_vol_size}" -a ! -f "${data_vol_path}"; then
    log "Allocating ${data_vol_path} - ${data_vol_size}"

    # write zeros at the start to facilitate detection of filesystem absence
    fallocate -l "${data_vol_size}" "${data_vol_path}.tmp"
    chmod 640 "${data_vol_path}.tmp"
    local ecmd
    ecmd=mkfs.ext4
    earg -F
    if test -n "${data_vol_inode_ratio}"; then
      earg -i "${data_vol_inode_ratio}"
    fi
    if test -n "${data_vol_reserved_percent}"; then
      earg -m "${data_vol_reserved_percent}"
    fi
    earg "${data_vol_path}.tmp"
    eval "cmd_log ${ecmd}"
    mv "${data_vol_path}.tmp" "${data_vol_path}"
  fi
}

setup_centos_images() {
  if ! test -e "${dir}/${main_vol}"; then
    log "Creating new Centos installation"
    local install_iso
    install_iso=CentOS-7-x86_64-Minimal-1708.iso
    if ! test -e "${dir}/${install_iso}"; then
      err "The source image for installation does not exist - ${dir}/${install_iso}"
    fi
    local ssh_pubkey_path
    ssh_pubkey_path="$HOME/.local/hsetup/vm/${VM}_ssh_login_key.pub"
    local ssh_pubkey
    if ! IFS= read -r ssh_pubkey < "${ssh_pubkey_path}" || test -z "${ssh_pubkey}"; then
      err "${ssh_pubkey_path} does not exist or is not properly formated, initialize it with public key to login"
    fi

    local install_tmp
    install_tmp="${dir}/install.tmp"
    rm -rf "${install_tmp}"
    mkdir "${install_tmp}"

    qemu-img create -f qcow2 "${install_tmp}/${main_vol}" 15G > /dev/null

    local kickstart='

# Install using cdrom
install
cdrom

# non-interactive setup
cmdline

# System language
lang en_US.UTF-8

# Keyboard layouts
keyboard us

# Enable more hardware support
# unsupported_hardware

# Network information
network --activate --device eth0 --bootproto=dhcp --hostname='"$VM"' --onboot=yes

# System authorization information
auth --enableshadow --passalgo=sha512

# Root password
rootpw test

# Selinux in permissive mode (will be disabled by provisioners)
#selinux --permissive

# System timezone
timezone UTC

# System bootloader configuration
bootloader --location=mbr --boot-drive=vda
#bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=vda

# Skip X config
skipx

# Create fresh partition on /dev/vda
ignoredisk --only-use=vda
zerombr
clearpart --all --drives=vda

# Disk partitioning information
part /boot --asprimary --fstype="ext4" --ondisk=vda --size=512 --label=BOOT
part / --asprimary --fstype="ext4" --ondisk=vda --size=512 --grow --label=ROOT


# Do not run the Setup Agent on first boot
firstboot --disabled

# Accept the EULA
eula --agreed

# System services
services --disabled chronyd,NetworkManager,postfix --enabled sshd

poweroff


# Packages

%packages --ignoremissing --excludedocs
@^minimal
@core
kexec-tools
rsync
# unnecessary firmware
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
-ipw2100-firmware
-ipw2200-firmware
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6050-firmware
-libertas-usb8388-firmware
-ql2100-firmware
-ql2200-firmware
-ql23xx-firmware
-ql2400-firmware
-ql2500-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware

%end

#%addon com_redhat_kdump --enable --reserve-mb='"'auto'"'

#%end

%post

sed -i -e "s/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT=1/" /etc/default/grub
grub2-mkconfig > /boot/grub2/grub.cfg
echo "blacklist floppy" > /etc/modprobe.d/blacklist-floppy.conf

sed -i \
  -e "s/^#?PermitRootLogin .*/PermitRootLogin prohibit-password/" \
  -e "s/^AcceptEnv .*/#&/g" \
  /etc/ssh/sshd_config
mkdir -p /root/.ssh
chmod 700 /root/.ssh
printf "%s\\n" '"'${ssh_pubkey}'"' > /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys

systemctl disable firewalld
%end
'
    dd if=/dev/zero "of=${install_tmp}/kickstart.img" status=none bs=512K count=1
    mkfs.vfat "${install_tmp}/kickstart.img" > /dev/null
    printf %s "${kickstart}" | mcopy -i "${install_tmp}/kickstart.img" - ::ks.cfg

    cmd_log isoinfo -i "${dir}/${install_iso}" -x /isolinux/initrd.img -R \
      > "${install_tmp}/initrd.img"
    isoinfo -i "${dir}/${install_iso}" -x /isolinux/vmlinuz -R \
      > "${install_tmp}/vmlinuz"

    local ecmd
    ecmd=qemu-system-x86_64

    earg -name "${VM}" -machine accel=kvm
    earg -m "${vm_memory}" -cpu host -smp 2

    earg -net nic,vlan=0,model=virtio
    earg -net "user,vlan=0,hostname=${VM}"

    earg -drive if=virtio,index=0,file="${install_tmp}/${main_vol},format=qcow2"
    earg -drive if=virtio,index=1,file="${install_tmp}/kickstart.img,format=raw"

    earg -cdrom "${dir}/${install_iso}"

    earg -nographic

    #earg -boot d
    earg -kernel "${install_tmp}/vmlinuz"
    earg -initrd "${install_tmp}/initrd.img"

    local kernel_args
    kernel_cmdline='inst.stage2=hd:LABEL=CentOS\x207\x20x86_64'
    kernel_cmdline="${kernel_cmdline} ks=hd:vdb:/ks.cfg"
    kernel_cmdline="${kernel_cmdline} vga=off console=ttyS0,115200n8"
    earg -append "${kernel_cmdline}"

    eval "${ecmd}"

    mv "${install_tmp}/${main_vol}" "${dir}/${main_vol}"
    rm -rf "${install_tmp}"
  fi
}

setup_coreos_images() {

  cd "$dir"

  if ! test -f "${prefix}_image.img.bz2"; then
    if ! gpg -k "${key_uid}" > /dev/null 2>&1; then
      log "Importing CoreOS key"
      curl "${key_url}" | gpg --import -
    fi
    fetch_as_tmp_file "${prefix}_image.img.bz2"
    fetch_as_tmp_file "${prefix}_image.img.bz2.sig"
    check_gpg_signature "${prefix}_image.img.bz2.tmp" "${prefix}_image.img.bz2.sig.tmp"
    mv "${prefix}_image.img.bz2.tmp" "${prefix}_image.img.bz2"
    rm "${prefix}_image.img.bz2.sig.tmp"
  fi

  if ! test -f "${main_vol}"; then
    log "Decompressing downloaded coreos image"
    bzip2 -d "${prefix}_image.img.bz2" -c > "${main_vol}.tmp"
    mv "${main_vol}.tmp" "${main_vol}"
  fi
}

setup_debian_images() {
  local initial_vol
  initial_vol="${main_vol%.qcow2}-initial.qcow2"

  if ! test -f "${dir}/${initial_vol}.lz"; then
    log "Creating new Debian initial image"
    mkdir -p "${dir}/${VM}.tmp"
    cd "${dir}/${VM}.tmp"

    local mirror_host mirror_top_dir mirror_path
    mirror_host=cdn-fastly.deb.debian.org
    mirror_top_dir=debian
    mirror_path=dists/stretch/main/installer-amd64/current/images

    if test ! -e netboot.tar.gz; then
      log "Downloading Debian installer"
      rm -f netboot.tar.gz.tmp
      curl -o netboot.tar.gz.tmp \
        "http://${mirror_host}/${mirror_top_dir}/${mirror_path}/netboot/netboot.tar.gz"

      if test ! -e SHA256SUMS; then
        # Download checksum from another host using https
        curl -o SHA256SUMS.tmp \
          "https://cdn-aws.deb.debian.org/debian/${mirror_path}/SHA256SUMS"

        local s
        s="$(egrep '^[0-9a-f]+  \./netboot/netboot\.tar\.gz$' SHA256SUMS.tmp || :)"
        if test -z "${s}"; then
          err "SHA256SUMS.tmp does not contain netboot/netboot.tar.gz entry"
        fi
        printf '%s\n' "${s%% *}  ./netboot.tar.gz.tmp" > SHA256SUMS.tmp
        mv SHA256SUMS.tmp SHA256SUMS
      fi
      log "Checking installer checksum"
      sha256sum -c SHA256SUMS

      mv netboot.tar.gz.tmp netboot.tar.gz
    fi

    if test ! -f "${initial_vol}"; then
      log "Preparing kernel and preseeded initrd"

      local end_install_script
      end_install_script='
printf %s "\
[Service]
Type=oneshot
ExecStart=/bin/mkdir -p /run/configdrive
ExecStart=/bin/mount -t 9p configdrive /run/configdrive -o ro,access=0,trans=virtio
ExecStart=/bin/sh /run/configdrive/config.sh
" > /etc/systemd/system/configdrive.service
mkdir -p /etc/systemd/system/local-fs.target.wants
ln -s /etc/systemd/system/configdrive.service /etc/systemd/system/local-fs.target.wants

sed -i "s#^GRUB_TIMEOUT=.*#GRUB_TIMEOUT=1#" /etc/default/grub
sed -i "s#^\\( *set timeout\\)=.*#\\1=1#" /boot/grub/grub.cfg

touch /.initialized
'
      end_install_script="$(printf %s "${end_install_script}" | gzip -9 | base64 -w0)"

      local preseed
      preseed="\
#_preseed_V1
d-i debian-installer/locale string en_US
d-i keyboard-configuration/xkb-keymap select us

d-i netcfg/choose_interface select auto
# d-i netcfg/choose_interface select eth1

d-i netcfg/get_hostname string unassigned-hostname
d-i netcfg/get_domain string unassigned-domain
d-i netcfg/hostname string ${VM}
d-i netcfg/domain string

d-i mirror/country string manual
d-i mirror/http/hostname string ${mirror_host}
d-i mirror/http/directory string /${mirror_top_dir}
d-i mirror/http/proxy string

d-i passwd/make-user boolean false
d-i passwd/root-password password root
d-i passwd/root-password-again password root

d-i clock-setup/utc boolean true
d-i time/zone string Etc/UTC
d-i clock-setup/ntp boolean false

d-i partman-auto/disk string /dev/vda
d-i partman-auto/method string regular
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true
d-i partman-auto/choose_recipe select atomic

d-i partman-md/confirm boolean true
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

d-i partman/mount_style select uuid

d-i apt-setup/non-free boolean false
d-i apt-setup/contrib boolean false
d-i apt-setup/services-select multiselect security, updates
d-i apt-setup/local0/source boolean true

tasksel tasksel/first multiselect standard
d-i pkgsel/include string openssh-server rsync
popularity-contest popularity-contest/participate boolean false

d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i grub-installer/bootdev  string /dev/vda
d-i debian-installer/add-kernel-opts string console=ttyS0,115200n8

d-i finish-install/reboot_in_progress note
d-i debian-installer/exit/poweroff boolean true

d-i preseed/late_command string in-target /bin/sh -c 'printf %s ${end_install_script} | base64 -d | gunzip | sh'
"

      rm -f linux initrd initrd.gz
      tar -xzf netboot.tar.gz --strip-components=3 \
        ./debian-installer/amd64/linux ./debian-installer/amd64/initrd.gz
      gzip -d initrd.gz
      printf %s "${preseed}" > preseed.cfg
      printf '%s\n' preseed.cfg | cpio -H newc -o -A -F initrd
      #gzip initrd

      log "Creating new qcow2 volume"
      rm -f "${initial_vol}.tmp"
      qemu-img create -f qcow2 "${initial_vol}.tmp" 8G

      log "Running the installer"
      local ecmd
      ecmd=qemu-system-x86_64
      earg -net user -net nic,model=virtio -m 2G
      earg -drive if=virtio,index=0,format=qcow2,file="${initial_vol}.tmp"
      earg -kernel linux -initrd initrd
      earg -nographic -append 'DEBIAN_FRONTEND=text vga=off console=ttyS0,115200n8 --- quiet'
      eval "${ecmd}"

      mkdir root_fs
      guestmount -a "${initial_vol}.tmp" -m /dev/sda1 root_fs
      if ! test -f root_fs/.initialized ; then
        fusermount -uz root_fs
        err "Failed to find .initialized marker in the root filesystem"
      fi
      fusermount -uz root_fs
      mv "${initial_vol}.tmp" "${initial_vol}"
    fi

    log "Compressing the volume with the new installation"
    rm -f "${initial_vol}.lz"

    # lzip -1 is 3 times faster than the default and increase the
    # archive by 20%
    lzip -k1 "${initial_vol}"
    mv "${initial_vol}.lz" "${dir}/${initial_vol}.lz"
    cd "${dir}"
    rm -rf "${dir}/${VM}.tmp"
  fi

  if ! test -f "${dir}/${main_vol}"; then
    log "Creating new main volume from the compressed initial one"
    lzip -d < "${dir}/${initial_vol}.lz" > "${dir}/${initial_vol}.tmp"
    qemu-img convert -f qcow2 -O qcow2 -o preallocation=falloc \
      "${dir}/${initial_vol}.tmp" "${dir}/${main_vol}.tmp"
    rm "${dir}/${initial_vol}.tmp"
    mv "${dir}/${main_vol}.tmp" "${dir}/${main_vol}"
  fi
}

setup_vm_config() {
  rm -rf "${rundir}"

  mkdir -p -m 700 "${rundir}"

  local ssh_config
  ssh_config="\
HostKeyAlias $VM
HostName 127.0.0.1
CheckHostIP no
Port ${ssh_host_port}
User ${ssh_user}
Ciphers aes128-gcm@openssh.com
UserKnownHostsFile ${rundir}/ssh.known_hosts
IdentityAgent ${SSH_AUTH_SOCK}
IdentitiesOnly no
IdentityFile none
"
  if test -n "${ssh_forward_agent}"; then
    ssh_config="${ssh_config}ForwardAgent yes${NL}"
  fi

  printf %s "${ssh_config}" > "${rundir}/ssh.conf"
  chmod 600 "${rundir}/ssh.conf"

  if is_coreos; then
    mkdir -p "${rundir}/configdrive/openstack/latest"

    local ssh_keys_yaml
    ssh_keys_yaml="$(ssh-add -L | sed -e 's/^/  - /' || :)"
    test -n "${ssh_keys_yaml}" || err "ssh agent at ${SSH_AUTH_SOCK} has no identities"

    printf %s '#cloud-config
hostname: "'"${VM}"'"
ssh_authorized_keys:
'"${ssh_keys_yaml}"'
' > "${rundir}/configdrive/openstack/latest/user_data"
  fi

  if is_debian; then
    mkdir -p "${rundir}/configdrive/ssh_authorized"
    ssh-add -L > "${rundir}/configdrive/ssh_authorized/root"
    local config_script
    config_script='set -e -u
cmd_log() {
  echo "$@" >&2
  "$@"
}

cmd_log cd "${0%/*}"
cmd_log mkdir -p -m 0700 /root/.ssh
umask 0077
cmd_log cp --remove-destination ssh_authorized/root /root/.ssh/authorized_keys
umask 0022
'
    if test -n "${boot_script_custom}"; then
      config_script="${config_script}${boot_script_custom}${NL}"
    fi
    printf %s "${config_script}" > "${rundir}/configdrive/config.sh"
  fi
}

start_lsyncd() {
  if test -z "${lsyncd_config}"; then
    return
  fi

  local config_path
  config_path="${rundir}/lsyncd.conf"
  printf %s "${lsyncd_config}" > "${config_path}"

  # Use -nodaemon + & to disable logging to syslog
  /usr/bin/lsyncd -insist -nodaemon "${config_path}" > "${rundir}/lsyncd.log" 2>&1 &
}

start_vm() {
  local nic_opt
  nic_opt="user"
  nic_opt="${nic_opt},model=virtio"
  nic_opt="${nic_opt},hostname=$VM"
  nic_opt="${nic_opt},net=10.0.2.0/24,host=10.0.2.2,dns=10.0.2.3"
  nic_opt="${nic_opt},hostfwd=tcp:127.0.0.1:${ssh_host_port}-:22"

  local ecmd
  ecmd=qemu-system-x86_64
  earg -name "${VM}"
  earg -machine accel=kvm
  earg -m "${vm_memory}"
  earg -cpu host
  earg -smp 2
  earg -nic "${nic_opt}"
  earg -drive if=virtio,index=0,file="${dir}/${main_vol}"
  if test -d "${rundir}/configdrive"; then
    local config_mount_tag
    config_mount_tag=configdrive
    is_coreos && config_mount_tag=config-2
    earg -fsdev "local,id=conf,security_model=none,readonly,path=${rundir}/configdrive"
    earg -device "virtio-9p-pci,fsdev=conf,mount_tag=${config_mount_tag}"
  fi
  if test -n "${data_vol_size}"; then
    earg -drive if=virtio,index=1,file="${data_vol_path}",format=raw
  fi

  #if :; then
  #  eval "cmd_log ${ecmd}"
  #  exit 1
  #fi

  earg -nographic
  #earg -monitor none
  earg -qmp "unix:${rundir}/qmp-sock,server,nowait"
  earg -parallel none
  #earg -vga none
  { eval "cmd_log ${ecmd}"; } < /dev/null > "${rundir}/log" 2>&1 &
  local qemu_pid
  qemu_pid="$!"

  log "waiting for $VM to start sshd"
  local i
  i=0
  while : ; do
    sleep 0.2
    local ecmd
    ecmd=ssh
    earg -o StrictHostKeyChecking=no
    earg -o ExitOnForwardFailure=yes
    earg -o ControlMaster=yes
    if test -n "${ssh_proxy_port}"; then
      earg -o DynamicForward="${ssh_proxy_port}"
    fi
    earg -f -N "${VM}"
    eval "${ecmd}" && break
    kill -n 0 "${qemu_pid}" || err "unexpected qemu exit"
    : "$((i+=1))"
    if test 150 -le "$((i+=1))"; then
      log "failed to connect to ssh at ${VM}, shutting down"
      stop_vm "${qemu_pid}"
      exit 1
    fi
  done
  log "${VM} started and ssh is ready"

  start_lsyncd
  echo "${qemu_pid}" > "${rundir}/pid"
}

stop_vm() {
  local pid
  pid="$1"
  printf '{ "execute": "qmp_capabilities" }\n { "execute": "system_powerdown" }' \
    | nc -U "$rundir/qmp-sock"
  local i;
  i=0
  while :; do
    if test 100 -lt "$((i+=1))"; then
      echo "qemu has not performed a clean powerdown after 5 seconds" >&2
    fi
    sleep 0.05
    if ! kill -0 "${pid}" 2>/dev/null; then
      echo "qemu has performed clean powerdown" >&2
      break
    fi
  done
}

setup_and_run_vm() {
  local start_user_unit
  if ! test -f "${user_unit_path}"; then
    start_user_unit=1
  elif ! systemctl --user is-active -q "${user_unit}"; then
    start_user_unit=1
    if systemctl --user is-failed -q "${user_unit}"; then
      systemctl -q --user reset-failed "${user_unit}"
    fi
  else
    start_user_unit=
  fi

  if test -n "${start_user_unit}"; then
    setup_vm_images
    setup_vm_config
    mkdir -p "${user_unit_dir}"
    printf %s '
[Service]
Environment=SSH_AUTH_SOCK='"${SSH_AUTH_SOCK}"'
Type=forking
ExecStart='"${self}"' internal start_vm '"${VM}"'
ExecStop='"${self}"' internal stop_vm '"${VM}"' $MAINPID
PIDFile='"${rundir}/pid"'
' > "${user_unit_path}"
    systemctl --user daemon-reload

    log "Starting ${VM} VM"
    #if :; then
    #  start_vm
    #fi
    systemctl --user start "${user_unit}"
  fi
}

self="$(realpath "$0")"
self_dir="${self%/*}"
readonly self self_dir

if test $# -eq 0; then
  set -- setup
fi

command="$1"
shift

if test internal = "${command}"; then
  internal_command="$1"
  get_config "$2"
  shift 2
  case "${internal_command}" in
  start_vm ) start_vm "$@" ;;
  stop_vm ) stop_vm "$@" ;;
  * ) err "unknown internal command - ${internal_command}" ;;
  esac
  exit 0
fi

get_config "${0##*/}"

case "${command}" in
setup ) setup_and_run_vm ;;
stop ) exec systemctl --user stop "${user_unit}" ;;
status ) exec systemctl --user status "${user_unit}" ;;
* ) err "unknown command - ${command}"
esac
