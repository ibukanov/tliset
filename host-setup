#!/bin/bash

source "$(dirname "$0")/lib.bash"

is_valid_hostname() {
    case "$1" in
	dserver | miranda | ultrabook ) return 0;;
    esac
    return 1;
}

fixup_transgui() {
    local path=/usr/share/applications/transgui.desktop
    local line='MimeType=application/x-bittorrent;x-scheme-handler/magnet;'
    if ! grep -q "^$line\$" "$path" ; then
	log "fixing $path"
	local data="$(cat "$path" | grep -v '^MimeType=')"
	local tmp="$(mktemp "$path.XXXXXXXXXX")"
	tmp_files+=($tmp)
	printf '%s\n%s\n' "$data" "$line" > "$tmp"
	chmod 644 "$tmp"
	mv "$tmp" "$path"
    fi
}


setup_packages() {
    log "Checking packages"
    inc_log_level

    local fedora_release=$(rpm -E %fedora)
    local rpmfusion_kinds=(
	free
#	rpmfusion-nonfree-release
    )
    local i rpmfusion_repos=()
    for i in "${rpmfusion_kinds[@]}"; do rpmfusion_repos+=("rpmfusion-$i-release"); done

    if ! rpm -q --quiet "${rpmfusion_repos[@]}" ; then
	log "Installing rpmfusion"
	local urls=()
	for i in "${rpmfusion_kinds[@]}"; do
	    urls+=("http://download1.rpmfusion.org/$i/fedora/rpmfusion-$i-release-$fedora_release.noarch.rpm")
	done
	dnf install -y --nogpgcheck "${urls[@]}" || true
    fi
    local list=(
	tmux xfce4-terminal
	git fuse-sshfs unison240 lsyncd
	quilt mercurial subversion
	livecd-tools
	autoconf automake gcc-c++ kernel-devel
	emacs
	tigervnc
	strace

	# filesystems
	autofs udftools inotify-tools fdupes fslint

	# Archives
	# unrar libunrar

	# encryption and backup
	apg duplicity perl-Digest-Bcrypt python-gdata

	# hardware management
	rfkill lm_sensors

	# Recovery tools
	ddrescue foremost scalpel testdisk

	# GUI
	gnome-tweak-tool
	nautilus-open-terminal

	# Graphs
	graphviz graphviz-doc

	# PDF tools
	pdfmerge poppler-utils

	# Media
	#kdenlive
	vlc gimp inkscape gthumb
	scribus transgui openssl-devel
	evince evince-djvu pdf2djvu
	linux-libertine-biolinum-fonts linux-libertine-fonts
	gstreamer1-libav
	gstreamer1-plugins-bad-free
	gstreamer1-plugins-bad-free-extras
	gstreamer1-plugins-bad-freeworld
	gstreamer1-plugins-good-extras
	gstreamer1-plugins-ugly

	# Languages
	hunspell-ru hunspell-nb
    )

    case "$NAME" in
	dserver | miranda )
	    list+=(
		libvirt-daemon-config-network
		libvirt-daemon-kvm
		qemu-kvm
		virt-manager
		virt-viewer
	    )
	    if [[ "$fedora_release" -ge 22 ]]; then
		list+=(docker)
	    else
		list+=(docker-io)
	    fi
	    ;;
    esac

    if [[ "$NAME" == dserver || "$NAME" == miranda ]]; then
	list+=(dnsmasq)
    fi

    for i in "${list[@]}"; do
	rpm -q --quiet "$i" || echo "Missed: $i"
    done

    if ! rpm -q --quiet "${list[@]}" ; then
	log "Installing missing packages"
	dnf install -y "${list[@]}"
	printf 'new-session\n' > /etc/tmux.conf
    fi

    if rpm -q --quiet transmission-remote-gtk ; then
	dnf remove -y transmission-remote-gtk
    fi

    systemctl enable autofs
    fixup_transgui
    dec_log_level
}

setup_fstab() {
    local fstab ids edits id disk
    if [[ "$NAME" == dserver ]]; then
	log "Checking /etc/fstab"
	fstab="$(cat /etc/fstab)"
	# Replace lables/uids with real devices in fstab for security
	# as an untrusted VM will access the whole disk.
	ids=($(egrep -o '^UUID=[A-Fa-f0-9-]+' <<< "$fstab" | cut -d= -f2 || true))
	if [[ ${#ids[@]} -ge 1 ]]; then
	    log "replacing UUID with devices for security with untrusted VM"
	    edits=()
	    for id in "${ids[@]}"; do
		[[ -b "/dev/disk/by-uuid/$id" ]] || err "failed to locate disk for uuid=$id"
		disk="/dev/$(basename "$(readlink "/dev/disk/by-uuid/$id")")"
		[[ -b "$disk" && ! -L "$disk" ]] || \
		    err "/dev/disk/by-uuid/$id does not point to real device file"
		edits+=(-e "s|^UUID=$id|$disk|")
	    done
	    fstab="$(sed "${edits[@]}" <<< "$fstab")"
	fi

	fstab="$(sed '/^#custom-start#/,/^#custom-end#/d' <<< "$fstab")"
	fstab+='
#custom-start#
/dev/sda1 /area/backup ext4 noatime,discard
/dev/sda2 /area/kino ext4 noauto,noatime,discard
#custom-end#'

	write_file /etc/fstab "$fstab"
	if [[ -n "$file_update" ]]; then
	    log "/etc/fstab was updated"
	fi
	mkdir -p /area/backup
	mkdir -p /area/kino
    fi
}

setup_grub() {
    local key custom_grub_defaults edits grub_defaults_text grub_config
    local -A config
    log "Checking grub"

    config=(
	[GRUB_DEFAULT]=saved
	[GRUB_TIMEOUT]=1
	[GRUB_CMDLINE_LINUX]="rhgb quiet LANG=en_US.UTF-8"
    )

    if [[ "$NAME" == dserver ]]; then
	# Avoid UUID for VM security
	config+=(
	    [GRUB_DISABLE_LINUX_UUID]=true
	)
    fi

    custom_grub_defaults=""
    for key in "${!config[@]}"; do
	custom_grub_defaults+="$(printf '\n%s=%q' "$key" "${config[$key]}")"
    done

    # Ensure stable order
    custom_grub_defaults="$(sort <<< "$custom_grub_defaults")"

    # delete all lines matching config keys and then append the proper values
    edits=()
    for key in "${!config[@]}"; do
	edits+=(-e "/^$key/d")
    done

    grub_defaults_text="$(sed "${edits[@]}" /etc/default/grub)$custom_grub_defaults"

    grub_config=/boot/grub2/grub.cfg
    [[ -f "$grub_config" ]] || grub_config=/boot/efi/EFI/fedora/grub.cfg
    [[ -f "$grub_config" ]] || err "Failed to locate grub.cfg"

    write_file /etc/default/grub "$grub_defaults_text"
    if [[ -n "$file_update" ]]; then
	log "updating $grub_config"
	grub2-mkconfig -o "$grub_config"
    fi
}

setup_network() {
    local -A hosts
    log "Checking network"
    inc_log_level

    hosts=(
#	[kino]=192.168.2.9
    )

    if [[ "$NAME" != dserver ]]; then
	hosts+=(
#	    [dserver]=192.168.2.10
	)
    fi

    if [[ ${!hosts[@]} -ne 0 ]]; then
	local hosts_text="" key edits
	for key in "${!hosts[@]}"; do
	    hosts_text+="$(printf '\n%s %s' "${hosts[$key]}" "$key")"
	done

	# Ensure stable order
	hosts_text="$(sort <<< "$hosts_text")"

	# delete all lines matching config keys and then append the proper values
	edits=()
	for key in "${!hosts[@]}"; do
	    edits+=(-e "/^[0-9.]\\+\\s\\+$key\$/d")
	done

	hosts_text="$(sed "${edits[@]}" /etc/hosts)$hosts_text"

	write_file -L /etc/hosts "$hosts_text"
    fi

    case "$NAME" in
	dserver ) setup_dserver_network ;;
	miranda ) setup_miranda_network ;;
    esac

    setup_autofs
    dec_log_level
}

enable_networkd() {
    if rpm -q --quiet NetworkManager ; then
	log "disabling NetworkManager"
	systemctl disable NetworkManager
	systemctl stop NetworkManager
	dnf remove -y NetworkManager
    fi
    if ! systemctl -q is-enabled systemd-networkd; then
	log "enabling systemd-networkd"
	systemctl enable systemd-networkd
    fi
}

enable_resolved() {
    if ! systemctl -q is-enabled systemd-resolved; then
	log "enabling systemd-resolved"
	systemctl enable systemd-resolved 
    fi

    if [[ ! -f /run/systemd/resolve/resolv.conf ]]; then
	systemctl start systemd-resolved 
    fi

    if [[ ! -L /etc/resolv.conf || \
		"$(readlink /etc/resolv.conf)" != /run/systemd/resolve/resolv.conf ]]; then
	log "symlinking /etc/resolv.conf"
	ln -s -f /run/systemd/resolve/resolv.conf /etc/resolv.conf
    fi
}

disable_firewalld() {
    if systemctl -q is-enabled firewalld; then
	log "disabling firewalld"
	systemctl disable firewalld
	systemctl stop firewalld
    fi
}


setup_dserver_network() {
    disable_firewalld

    netdev_lan="$dserver_eth_lan"
    netdev_bridge=macvlan0

    file_update_count=0

    enable_networkd

    write_file -L /etc/systemd/network/80-wan.network <<EOF
[Match]
MACAddress=80:ee:73:76:8f:4c

[Network]
DHCP=ipv4
EOF

    # Use macvlan, not bridge, for more efficient setup
    write_file -L /etc/systemd/network/80-macvlan.netdev <<EOF
[NetDev]
Name=$netdev_bridge
Kind=macvlan
[MACVLAN]
Mode=bridge
EOF
    write_file -L /etc/systemd/network/80-lan.network <<EOF
[Match]
Name=$netdev_lan
[Network]
MACVLAN=$netdev_bridge
EOF
    write_file -L /etc/systemd/network/80-macvlan.network <<EOF
[Match]
Name=$netdev_bridge
[Network]
IPMasquerade=yes
Address=192.168.2.10/24
#Gateway=192.168.2.1
EOF

    if [[ $file_update_count -gt 0 ]]; then
	log "restarting systemd-networkd"
	systemctl restart systemd-networkd
    fi

    if true; then
	write_file -L /etc/resolv.conf <<EOF
nameserver 127.0.0.1
EOF
	if systemctl -q is-enabled systemd-resolved; then
	   log "disabling systemd-resolved"
	   systemctl disable systemd-resolved
	   systemctl stop systemd-resolved
	fi
    else
	enable_resolved
    fi

    setup_dserver_dnsmasq
    setup_dserver_port_forwarding
}

setup_dserver_dnsmasq() {
    write_file -L /etc/dnsmasq.d/local.conf <<EOF
interface=$netdev_bridge
#interface=br0
domain-needed
bogus-priv

# for now use Google's services
no-resolv
server=8.8.8.8
server=8.8.4.4

no-hosts
dhcp-range=192.168.2.50,192.168.2.150,10m

address=/dserver/192.168.2.10
address=/dsrv.duckdns.org/192.168.2.10

dhcp-host=08:60:6E:CD:96:68,192.168.2.2
address=/wifi/192.168.2.2

# Virtual machine needs a stable ip to use with iptables rules
dhcp-host=$mac_kino,192.168.2.9
address=/kino/192.168.2.9

#dhcp-option=option:router,192.168.2.1
EOF
    local changed_dnsmasq="$file_update"
    if ! systemctl -q is-enabled dnsmasq; then
	log "enabling dnsmasq"
	systemctl enable dnsmasq
    fi
    if systemctl -q is-active dnsmasq; then
	if [[ -n "$changed_dnsmasq" ]]; then
	    log "restarting dnsmasq"
	    systemctl restart dnsmasq
	fi
    else
	log "starting dnsmasq"
	systemctl start dnsmasq
    fi
}

setup_dserver_port_forwarding() {
    write_file -L -m 755 /etc/tliset/forward-ports <<'EOF'
#!/bin/bash
set -e -u

wan_interface=wan
action=$1
errors=0

forward() {
    local protocol="$1" wan_port="$2" lan_ip="$3" lan_port
    if [[ $# -le 3 ]]; then
        lan_port="$wan_port"
    else
        lan_port="$4"
    fi
    if [[ "$lan_ip" == [a-z]* ]]; then
        local host="$lan_ip"
        lan_ip="$(getent hosts "$host" | cut -d' ' -f1)"
        [[ -n "$lan_ip" ]] || { echo "Failed to find IP for $host" 1>&2; exit 1; }
    fi

    local flag
    case "$action" in
        open ) flag="-A" ;;
        close ) flag="-D" ;;
        * ) echo "Bad $0 action: $action" 1>&2 ;;
    esac
    iptables "$flag" PREROUTING \
        -t nat -i "$wan_interface" \
        -p "$protocol" --dport "$wan_port" \
        -j DNAT --to "$lan_ip:$lan_port" || let errors+=1
}

forward tcp 9092 kino
forward tcp 51413 kino
forward udp 51413 kino

[[ $errors -eq 0 ]] || exit 1
EOF

    write_file -L /etc/systemd/system/forward-ports.service <<EOF
[Unit]
After=network-online.target
[Install]
WantedBy=network-online.target
[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=/etc/tliset/forward-ports open
ExecStop=/etc/tliset/forward-ports close
EOF
    
    if ! systemctl -q is-enabled forward-ports; then
	log "enabling forward-ports"
	systemctl enable forward-ports
    fi
}

setup_miranda_network() {

    # TODO use dnsmasq to integrate with VM names

    if systemd-detect-virt -v -q; then

	enable_networkd

	write_file -L /etc/systemd/network/zz-default.network <<EOF
[Network]
DHCP=v4

[DHCP]
UseMTU=true
UseDomains=true
EOF
	if let file_update; then
	    log "restarting systemd-networkd"
	    systemctl restart systemd-networkd
	fi
	enable_resolved

	disable_firewalld

    else
	write_file -L /etc/NetworkManager/conf.d/99-local.conf <<EOF
[main]
#dns=dnsmasq
EOF
	if [[ -n "$file_update" ]]; then
	    cmd_log systemctl restart NetworkManager
	fi
    fi
}

setup_autofs() {
    local setup_path="$selfdir/autofs-setup"
    if [[ "$setup_path" -nt /etc/tliset/.installed ]]; then
	local flags=(-u -i)
	if [[ "$NAME" == miranda || "$NAME" == ultrabook ]]; then
	    flags+=(-n -l)
	fi
	bash "$setup_path" "${flags[@]}"
	touch /etc/tliset/.installed
    fi
}

setup_ssh() {
    log "Checking ssh"
    mkdir -p -m 0700 /root/.ssh
    case "$NAME" in
	miranda | ultrabook )
	    local mainuser=igor
	    if [[ "$NAME" == ultrabook ]]; then
		mainuser=lubava
	    fi
	    local key_type
	    for key_type in ed25519 rsa; do
		local subpath=".ssh/id_$key_type"
		if [[ ! -f "/root/$subpath" && -e "/home/$mainuser/$subpath" ]]; then
		    log "Linking administrator ssh $key_type as the key for the root user"
		    rm -f "/root/$subpath" "/root/$subpath.pub"
		    ln -s "/home/$mainuser/$subpath" "/root/$subpath"
		    ln -s -f "/home/$mainuser/$subpath.pub" "/root/$subpath.pub"
		fi
	    done
	    ;;
	* )
	    if [[ ! -f /root/.ssh/id_ed25519 ]]; then
		log "Generating ssh key for the root user"
		ssh-keygen -t ed25519 -N '' -f /root/.ssh/id_ed25519
	    fi
	    ;;
    esac

    # Based on https://stribika.github.io/2015/01/04/secure-secure-shell.htlm
    local sshd_config="
UsePrivilegeSeparation sandbox

KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
HostKey /etc/ssh/ssh_host_ed25519_key
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

UseDNS no
ClientAliveInterval 180

AuthorizedKeysFile /etc/ssh/authorized_keys/%u /etc/ssh/authorized_keys/root
PasswordAuthentication no
ChallengeResponseAuthentication no
GSSAPIAuthentication no
UsePAM yes

Subsystem sftp /usr/libexec/openssh/sftp-server
"
    local root_authorized_keys="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINuRT02EgmvQdI96X/qGdUCCSUbTHlvRiHuF0BKpNhch igor@localhost.localdomain"

    if [[ "$NAME" == dserver ]]; then
	# Allow root to ssh to self for debugging
	root_authorized_keys+="$(printf '\n%s' "$(cat /root/.ssh/id_ed25519.pub)")"
    fi

    if [[ "$NAME" == dserver || "$NAME" == ultrabook ]]; then
	file_update_count=0
	write_file -L /etc/systemd/system/sshd.service.d/local.conf <<EOF
[Service]
Environment=OPTIONS=-e
EOF
	if [[ $file_update_count -gt 0 ]]; then
	    systemctl daemon-reload
	fi
	write_file -L /etc/ssh/sshd_config "$sshd_config"

	if [[ "$NAME" == dserver ]]; then
	    if ! systemctl -q is-enabled sshd; then
		systemctl enable sshd
	    fi
	fi

	if [[ $file_update_count -gt 0 ]]; then
	    systemctl try-restart sshd
	fi

	# The file with public keys for root file should be public
	# redable so it can be used to login to other accounts.
	write_file -L -m 644 /etc/ssh/authorized_keys/root "$root_authorized_keys"
	write_file -L -m 640 -o root:lubava /etc/ssh/authorized_keys/lubava <<EOF
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKGV+r2T/Mf9QrEsupuxwWMv2UtLYgD3rjBQG/W5Dfxo lubava@ultrabook.localdomain
EOF
    fi
}

add_user() {
    local user="$1" id="$2"
    if ! id -u "$user" 2>/dev/null 1>&2; then
	groupadd -g "$id" "$user"
	useradd -g "$id" -u "$id" "$user"
	passwd -d "$user"
    fi
}

setup_users() {
    log "Checking users"
    add_user lubava 1978
    if [[ "$NAME" == dserver ]]; then
	add_user kino 1001
    fi
}

setup_services() {
    log "Checking services"
    inc_log_level
    if true; then
	if systemctl -q is-enabled docker; then
	    log "disabling docker service"
	    systemctl disable docker
	fi
    else
	log "Checking docker"
	local config="
[Service]
MountFlags=private
"
	mkdir -p /etc/systemd/system/docker.service.d
	write_file /etc/systemd/system/docker.service.d/local.conf "$config"
	if [[ -n "$file_update" ]]; then
	    log "updated /etc/systemd/system/docker.service.d/local.conf"
	    systemctl daemon-reload
	fi
	systemctl enable docker
    fi
    if [[ "$NAME" == dserver ]]; then
        setup_dyndns
    fi
    dec_log_level
}

setup_dyndns() {

    log "Checking dyndns"

    if [[ ! -s /etc/duckdns.key ]]; then
	[[ -t 1 ]] || err "cannot ask for /etc/duckdns.key value as input is not tty"
	local api_key
	IFS='' read -p 'Enter API key for www.duckdns.org: ' api_key
	write_file -m 640 -o root:nobody /etc/duckdns.key "$api_key"
    fi

    file_update_count=0
    write_file /etc/systemd/system/dyndns_update.timer <<EOF

[Unit]
After=network-online.target
Wants=network-online.target

[Timer]
Persistent=true
# Each 10 minutes
OnCalendar=*:0/10

[Install]
WantedBy=multi-user.target
EOF
    write_file /etc/systemd/system/dyndns_update.service <<'EOF'
[Unit]
After=network-online.target
Wants=network-online.target

[Service]
User=nobody
ExecStart=/bin/bash -c '[[ "$(/usr/bin/curl -s "https://www.duckdns.org/update?domains=dsrv&token=$(< /etc/duckdns.key)&ip=")" == OK ]]'
Type=oneshot
EOF
    if [[ "$file_update_count" -gt 0 ]]; then
	log "enabling/updating dyndns config"
	systemctl daemon-reload
	systemctl enable dyndns_update.timer
	systemctl start dyndns_update.timer
    fi
}

. "$selfdir/zram-setup"

show_usage=""
NAME=""
remote=""

while getopts :hn:r: opt; do
    case "$opt" in
	h ) show_usage=1 ;;
	n )
	    NAME="$OPTARG"
	    is_valid_hostname "$NAME" || \
		usage_err "The value of -n argument '$NAME' is not a known host name."
	    ;;
	r )
	    remote="$OPTARG"
	    is_valid_hostname "$remote" || \
		usage_err "The value of -n argument '$remote' is not a known host name."
	    ;;
	\? ) usage_err "option -$OPTARG requires an argument" ;;
	* ) usage_err "unknown -$OPTARG option" ;;
    esac
done

#[[ $# -eq $(($OPTIND - 1)) ]] || usage_err "Unexpected extra arguments: $@"
let OPTIND==1+$# || usage_err "Unexpected extra arguments: $@"

[[ -z "$NAME" || -z "$remote" ]] || usage_err "Only one of -n, -r can be given"

if [[ -n "$show_usage" ]]; then
    echo "Usage: $0 [OPTION]..."
    echo "Customize installation for the given computer."
    echo
    echo "  -h  show this help and exit"
    echo "  -n name  assume the given name as the hostname rather than use /etc/hostname."
    echo "           The valid values are dserver, miranda, ultrabook."
    echo "  -r name  execute setup on the remote machine name using ssh to copy the setup files."
    echo
    exit
fi

if [[ -n "$remote" ]]; then
    run_remotely "$remote" -n "$remote"
fi

if [[ "$(id -u)" -ne 0 ]]; then
    exec sudo "$0" "$@"
fi

if [[ -z "$NAME" ]]; then
    IFS='' read NAME < /etc/hostname
    if ! is_valid_hostname "$NAME"; then
	err "The content of /etc/hostname is '$NAME' is not a supported name." \
	    "Use -n option to set the hostname explicitly."
    fi
else
    IFS='' read current_hostname < /etc/hostname
    if is_valid_hostname "$current_hostname" && [ "$NAME" != "$current_hostname" ]; then
	err "Already setup as $current_hostname. To force put localhost into /etc/hostname"
    fi
    echo "$NAME" > /etc/hostname
fi



setup_fstab
setup_packages
setup_grub
setup_zram
setup_ssh
setup_network
setup_users
setup_services
