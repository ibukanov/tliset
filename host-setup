#!/bin/bash

source "$(dirname "$0")/lib.bash"

valid_host_names=(miranda ultrabook untrusted bergenrabbit hippyru lubavainfo thip r2)

declare -i kind_fedora=0
declare -i kind_coreos=0
declare -i with_vol_storage=0
declare -i with_zram=1
declare -i with_networkd=0
declare -i with_networkd_if_virt=0
declare -i with_resolved=0
declare -i with_dyndns=0
declare -i with_kino_access=0
declare -i with_latex=0
declare -i with_transgui=0
declare -i with_hippyru_www_access=0
declare -i with_common_fedora_packages=0

declare -i with_enabled_sshd=1
declare -i sshd_extra_listen_port=0

declare hippyru_backup_time=

declare single_ssh_user=
declare downloads_user=

declare -a virt_net_ids=()

# Replace lables/uids with real devices in fstab/grub for security
# when allowing untrusted VM to access the whole disk.
declare -i with_disabled_disk_uuid=0

declare -i with_dnsmasq=0

get_host_options() {
    case "$NAME" in
	ultrabook )
	    kind_fedora=1
	    with_common_fedora_packages=1
	    with_transgui=1
	    with_kino_access=1
	    with_hippyru_www_access=1
	    with_enabled_sshd=0
	    ;;
	miranda )
	    kind_fedora=1
	    with_networkd_if_virt=1
	    with_common_fedora_packages=1
	    with_latex=1
	    with_enabled_sshd=0
	    sshd_extra_listen_port=19022
	    with_hippyru_www_access=1
	    with_kino_access=1
	    downloads_user=igor
	    virt_net_ids=(10)
	    ;;
	untrusted )
	    kind_fedora=1
	    with_common_fedora_packages=1
	    with_networkd=1
	    with_resolved=1
	    with_kino_access=1
	    with_transgui=1
	    downloads_user=user
	    single_ssh_user=user
	    virt_net_ids=(11)
	    ;;
	thip )
	    kind_coreos=1
	    with_vol_storage=1
	    with_zram=1
	    virt_net_ids=(12 13 14 15 16)
	    ;;
	bergenrabbit | hippyru | lubavainfo )
	    kind_coreos=1
	    with_zram=1
	    ;;
	r2 )
	    kind_coreos=1
	    with_zram=1
	    hippyru_backup_time=03:00:02
	    ;;
	* )
	    err "unknown '$NAME'"
	    ;;
    esac
    if let kind_coreos; then
	with_networkd=1
	with_resolved=1
	single_ssh_user=core
    fi
}
    

is_valid_host_name() {
    local name="$1" i
    for i in "${valid_host_names[@]}"; do
	if [[ "$i" == "$name" ]]; then
	    return 0
	fi
    done
    return 1;
}

fixup_transgui() {
    local path=/usr/share/applications/transgui.desktop
    local line='MimeType=application/x-bittorrent;x-scheme-handler/magnet;'
    if ! grep -q "^$line\$" "$path" ; then
	log "fixing $path"
	local data="$(cat "$path" | grep -v '^MimeType=')"
	local tmp="$(mktemp "$path.XXXXXXXXXX")"
	tmp_files+=($tmp)
	printf '%s\n%s\n' "$data" "$line" > "$tmp"
	chmod 644 "$tmp"
	mv "$tmp" "$path"
    fi
}

setup_fedora_packages() {
    log "Checking packages"
    inc_log_level

    if let with_common_fedora_packages; then
	local rpmfusion_kinds=(
	    free
	    nonfree
	)
	local i rpmfusion_repos=()
	for i in "${rpmfusion_kinds[@]}"; do
	    rpmfusion_repos+=("rpmfusion-$i-release")
	done

	if ! rpm -q --quiet "${rpmfusion_repos[@]}" ; then
	    log "Installing rpmfusion"
	    local urls=()
	    for i in "${rpmfusion_kinds[@]}"; do
		urls+=("http://download1.rpmfusion.org/$i/fedora/rpmfusion-$i-release-$fedora_release.noarch.rpm")
	    done
	    dnf install -y --nogpgcheck "${urls[@]}" || true
	fi
    fi
    local list=()
    if let with_common_fedora_packages; then
	list+=(
	    tmux xfce4-terminal
	    git fuse-sshfs sshpass lsyncd
	    quilt mercurial subversion
	    livecd-tools
	    autoconf automake gcc-c++ kernel-devel
	    emacs
	    tigervnc
	    strace
	    policycoreutils-python-utils

	    # filesystems
	    udftools inotify-tools fdupes fslint

	    # Archives
	    unrar libunrar

	    # encryption and backup
	    apg duplicity perl-Digest-Bcrypt python-gdata

	    # Recovery tools
	    ddrescue foremost scalpel testdisk

	    # Graphs
	    graphviz graphviz-doc

	    # PDF tools
	    pdfmerge poppler-utils

	    # Media
	    kdenlive
	    ffmpeg
	    vlc gimp inkscape gthumb
	    scribus
	    evince evince-djvu pdf2djvu
	    linux-libertine-biolinum-fonts linux-libertine-fonts
	    gstreamer1-libav
	    gstreamer1-plugins-bad-free
	    gstreamer1-plugins-bad-free-extras
	    gstreamer1-plugins-bad-freeworld
	    gstreamer1-plugins-good-extras
	    gstreamer1-plugins-ugly

	    # Languages
	    hunspell-ru hunspell-nb
	)

	if [[ -z "$virt" ]]; then
	    list+=(
		# hardware management
		rfkill lm_sensors
	    )

	    
	    list+=(
		# Assume this is only necessary on real hardware
		gnome-tweak-tool
		gnome-terminal-nautilus
		gnome-shell-extension-alternate-tab
	    )
	fi
    fi

    let with_latex && list+=(texlive)
    let with_transgui && list+=(transgui openssl-devel)

    if [[ -n "$virt" ]]; then
	list+=(gcc kernel-devel)
    fi

    case "$NAME" in
	miranda )
	    list+=(
		virt-manager
		virt-viewer
		docker
	    )
	    if [[ -z "$virt" ]]; then
		list+=(
		    libvirt-daemon-config-network
		    libvirt-daemon-kvm
		    qemu-kvm
		)
	    fi
	    ;;
    esac

    if [[ "$NAME" == miranda ]]; then
	list+=(tinyproxy firefox)
    fi

    for i in "${list[@]}"; do
	rpm -q --quiet "$i" || echo "Missed: $i"
    done

    if ! rpm -q --quiet "${list[@]}" ; then
	log "Installing missing packages"
	dnf install -y "${list[@]}"
    fi

    local remove_list=()

    if let with_transgui; then
	remove_list+=(transmission-gtk transmission-remote-gtk)
    fi
    if let with_networkd && let kind_fedora; then
	remove_list+=(network-manager-applet)
    fi
    if [[ "$NAME" == miranda ]]; then
	# No need to keep midori browser
	remove_list+=(midori)
    fi
    if let ${#remove_list[@]}; then
	local status=0
	rpm -q --quiet "${remove_list[@]}" || status=$?
	if let "status < ${#remove_list[@]}"; then
	    cmd_log dnf remove -y "${remove_list[@]}"
	fi
	fixup_transgui
    fi

    printf 'new-session\n' | write_file /etc/tmux.conf

    dec_log_level
}

remove_fstab_uuids() {
    log "Checking /etc/fstab"
    local fstab
    IFS='' read -rd '' fstab < /etc/fstab 
    local -a ids
    ids=($(egrep -o '^UUID=[A-Fa-f0-9-]+' <<< "$fstab" | cut -d= -f2 || true))
    if [[ ${#ids[@]} -ge 1 ]]; then
	log "replacing UUID with devices for security with untrusted VM"
	local -a edits=()
	local id
	for id in "${ids[@]}"; do
	    [[ -b "/dev/disk/by-uuid/$id" ]] || err "failed to locate disk for uuid=$id"
	    local resolved disk
	    resolved="$(readlink "/dev/disk/by-uuid/$id")"
	    disk="/dev/$(basename "$resolved")"
	    [[ -b "$disk" && ! -h "$disk" ]] || \
		err "/dev/disk/by-uuid/$id does not point to real device file"
	    edits+=(-e "s|^UUID=$id|$disk|")
	done
	fstab="$(printf %s "$fstab" | sed "${edits[@]}")"
    fi
    
    write_file /etc/fstab "$fstab"
    if let file_update; then
	log "/etc/fstab was updated"
    fi
}

setup_fstab() {
    log "Checking fstab"
    local fstab ids edits id disk
    inc_log_level
    if let with_disabled_disk_uuid; then
	remove_fstab_uuids
    fi

    if [[ -n "$downloads_user" ]]; then
	local dirname=downloads
	local dir="/$dirname"
	local unitname="$dirname"
	if [[ ! -d "$dir" ]]; then
	    # TODO find out why systemd does not create the dir
	    # automatically.
	    log "creating $dir"
	    mkdir -m 0755 "$dir"
	fi
	if [[ -n "$virt" ]] ; then
	    p_file "\$1/$unitname.mount" "\
[Mount]
Where=$dir
Type=vboxsf
What=Downloads
Options=uid=$downloads_user,gid=$downloads_user,nosuid,nodev
"
	    p_file "\$1/$unitname.automount" "\
[Automount]
Where=$dir
"
            multi_user_wants+=("$unitname.automount")
	fi
    fi
    dec_log_level
}

setup_grub() {
    local key custom_grub_defaults edits grub_defaults_text grub_config
    local -A config
    log "Checking grub"

    local net_kernel_options=""
    if [[ -n "$virt" ]] && let kind_fedora; then
	# Disable predictable interface names under VM as they
	# complicates autoconfig.
	net_kernel_options=" net.ifnames=0"
    fi

    config=(
	[GRUB_DEFAULT]=saved
	[GRUB_TIMEOUT]=1
	[GRUB_CMDLINE_LINUX]="rhgb quiet LANG=en_US.UTF-8$net_kernel_options"
    )

    if let with_disabled_disk_uuid; then
	# Avoid UUID for VM security
	config+=(
	    [GRUB_DISABLE_LINUX_UUID]=true
	)
    fi

    custom_grub_defaults=""
    for key in "${!config[@]}"; do
	custom_grub_defaults+="$(printf '\n%s=%q' "$key" "${config[$key]}")"
    done

    # Ensure stable order
    custom_grub_defaults="$(sort <<< "$custom_grub_defaults")"

    # delete all lines matching config keys and then append the proper values
    edits=()
    for key in "${!config[@]}"; do
	edits+=(-e "/^$key/d")
    done

    grub_defaults_text="$(sed "${edits[@]}" /etc/default/grub)$custom_grub_defaults"

    grub_config=/boot/grub2/grub.cfg
    [[ -f "$grub_config" ]] || grub_config=/boot/efi/EFI/fedora/grub.cfg
    [[ -f "$grub_config" ]] || err "Failed to locate grub.cfg"

    write_file /etc/default/grub "$grub_defaults_text"
    if let file_update; then
	log "updating $grub_config"
	grub2-mkconfig -o "$grub_config"
    fi
}

setup_network() {
    local -A hosts
    log "Checking network"
    inc_log_level

    hosts=(
#	[kino]=$ip_kino
    )

    if [[ ${#hosts[@]} -ne 0 ]]; then
	local hosts_text="" key edits
	for key in "${!hosts[@]}"; do
	    hosts_text+="$(printf '\n%s %s' "${hosts[$key]}" "$key")"
	done

	# Ensure stable order
	hosts_text="$(sort <<< "$hosts_text")"

	# delete all lines matching config keys and then append the proper values
	edits=()
	for key in "${!hosts[@]}"; do
	    edits+=(-e "/^[0-9.]\\+\\s\\+$key\$/d")
	done

	hosts_text="$(sed "${edits[@]}" /etc/hosts)$hosts_text"

	write_file /etc/hosts "$hosts_text"
    fi

    print_network
    if let with_dyndns; then
	print_dyndns
    fi
    if let with_dnsmasq; then
	print_dserver_dnsmasq
    fi

    case "$NAME" in
	miranda ) install_miranda_network ;;
    esac

    if let with_resolved; then
	if [[ ! -L /etc/resolv.conf || \
		    "$(readlink /etc/resolv.conf)" != /run/systemd/resolve/resolv.conf ]]; then
	    cmd_log ln -s -f /run/systemd/resolve/resolv.conf /etc/resolv.conf
	fi

	# Switch system resolver to use systemd-resolved.
	if grep -q '^hosts:.*\<dns\>' /etc/nsswitch.conf; then
	    sed -i -e 's/^\(hosts:.*\)\<dns\>/\1resolve/' /etc/nsswitch.conf
	fi
    fi

    dec_log_level
}

# Escape argument using single quotas with with each single quote in
# arg replaced by '"'"'
escape_for_shell() {
    local arg="$1" escaped= before_quote
    while : ; do
	before_quote="${arg%%\'*}"
	[[ $arg != "$before_quote" ]] || break
	escaped="$escaped$before_quote'\"'\"'"
	arg="${arg#*\'}"
    done
    printf %s "'$escaped$arg'"
}

start_generator_write() {
    multi_user_wants=()
    sockets_wants=()
    gen_body=""
}

print_wants_list() {
    local target="$1"
    shift
    let $# || return 0
    pl ''
    pl 'mkdir -p "$1/'"$target.d"'"'
    local i wants_body="[Unit]$NL"
    for i in "$@"; do
	wants_body+="Wants=$i$NL"
    done
    p_file '"$1/'"$target"'.d/tliset.conf"' "$wants_body"

}

finish_generator_write() {
    [[ -n "$gen_body" ]] || let "${#multi_user_wants[@]} + ${#socket_wants[@]}" || return

    print_wants_list multi-user.target "${multi_user_wants[@]:+${multi_user_wants[@]}}"
    print_wants_list sockets.target "${socket_wants[@]:+${socket_wants[@]}}"

    local prefix=''
    prefix+=$'#!/bin/sh\n'
    if true; then
	prefix+='
if [[ -z "${TLISET_HAS_LOG-}" ]]; then
    export TLISET_HAS_LOG=1
    exec "$0" "$@" > /run/tliset.log 2>&1
fi
date '+%Y-%m-%d_%H:%M:%S'
set -x
'
    fi
    prefix+=$'set -u\n'
    prefix+=$'mkdir -p /run/tliset\n'

    write_file -m 755 /etc/systemd/system-generators/tliset "$prefix$gen_body"
    if let file_update; then
	cmd_log systemctl daemon-reload
    fi
}

pl() {
    gen_body+="$1$NL"
}

# The first argument is path already properly quoted to read as single
# word in a shell. The second argument is text that should be written
# into the file at that path. Option -x indicattes that file must be
# executable.
p_file() {
    local -i executable=0
    if [[ "$1" == "-x" ]]; then
	shift
	executable=1
    fi
    local path="$1"
    local body="$2"
    pl "> $path printf %s $(escape_for_shell "$body")"
    if let executable; then
	pl "chmod 755 $path"
    fi
}

p_mask_service() {
    pl "ln -s /dev/null \"\$1/$1\""
}

print_network() {
    if let with_networkd && let kind_fedora; then
	multi_user_wants+=(systemd-networkd.service)
	pl ''
	pl 'mkdir -p "$1/sockets.target.d"'
	p_file '"$1/sockets.target.d/tliset.conf"' "\
[Unit]
Wants=systemd-networkd.socket
"
	# Mask all NetworkManager-related services
	p_mask_service NetworkManager.service
	p_mask_service NetworkManager-dispatcher.service
	p_mask_service NetworkManager-wait-online.service
	p_mask_service firewalld.service
	p_mask_service dbus-org.fedoraproject.FirewallD1.service

	# Make sure that system-supplied dnsmasq is masked
	p_mask_service dnsmasq.service
    fi
    if let with_resolved; then
	multi_user_wants+=(systemd-resolved.service)

	# Trust Google to do DNS if no other DNS servers are known
	pl ''
	pl 'resolve_dir="$1/../resolved.conf.d"'
	pl 'mkdir -p "$resolve_dir"'
	p_file '"$resolve_dir/tliset.conf"' "\
[Resolve]
FallbackDNS=8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844
"
    fi

    if let with_networkd; then
	pl ''
	pl 'net_dir="$1/../network"'
	pl 'mkdir -p "$net_dir"'

	if let kind_fedora; then
	    pl 'chcon -t etc_t "$net_dir"'
	fi

	if [[ $NAME == dserver ]]; then
	    print_dserver_network_files
	elif let with_virtual_box_network; then
	    print_virtualbox_network
	elif let kind_fedora; then
	    print_fedora_networkd_files
	fi

	if [[ $NAME == r2 ]]; then
	    print_r2_default_net
	fi
    fi
}

print_dserver_network_files() {
    pl ''

    # Generate setup to allow for VMs that are accessible from the
    # lan. Use macvlan, not bridge, for beter efficiency.
    p_file '"$net_dir/80-macvlan.netdev"' "\
[NetDev]
Name=$dserver_bridge
Kind=macvlan
[MACVLAN]
Mode=bridge
"

    p_file '"$net_dir/80-lan.network"' "\
[Match]
MACAddress=80:ee:73:76:8f:4c
[Network]
MACVLAN=$dserver_bridge
"

    p_file '"$net_dir/80-macvlan.network"' "\
[Match]
Name=$dserver_bridge
[Network]
DHCP=ipv4
"

    # Print port forwarding initialization service and its scripts
    if false; then
	pl ''
	p_file '"$1/tliset-forward-ports.service"' "\
[Unit]
After=network-online.target

[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=/run/tliset/open-ports
ExecStop=/bin/sh /run/tliset/close-ports
"

	pl 'mkdir -p "$1/network-online.target.wants"'
	pl 'ln -s "$1/tliset-forward-ports.service" "$1/network-online.target.wants"'
	p_file -x '/run/tliset/open-ports' "$(print_dserver_port_forwards)"
    fi
}

# Output string for a script that runs iptables to setup port
# forwarding and generate another script to close those. This 2-stage
# generation allows to close ports using the old definition after the
# open part is changed with new defines.
print_dserver_port_forwards() {
    local open_text="#!/bin/sh$NL"
    local close_text="#!/bin/sh$NL"
    local i
    for i in "${dserver_port_forwards[@]}"; do
	if [[ "$i" =~ ^(tcp|udp):([0-9]+):([0-9.]+)(:([0-9]+))?$ ]]; then
	    local protocol="${BASH_REMATCH[1]}"
	    local wan_port="${BASH_REMATCH[2]}"
	    local lan_ip="${BASH_REMATCH[3]}"
	    local lan_port="${BASH_REMATCH[5]}"
	    if [[ -z "$lan_port" ]]; then
		lan_port="$wan_port"
	    fi
	    local s="PREROUTING -t nat -i $dserver_eth_wan -p $protocol --dport $wan_port -j DNAT --to $lan_ip:$lan_port"
	    open_text+="iptables -A $s$NL"
	    close_text+="iptables -D $s$NL"
	else
	    err "Bad port forwarding spec: $i"
	fi
    done

    open_text+="> /run/tliset/close-ports printf %s $(escape_for_shell "$close_text")$NL"
    open_text+="chmod 755 /run/tliset/close-ports$NL"
    printf %s "$open_text"
}

print_dyndns() {
    if [[ ! -s /etc/duckdns.key ]]; then
	[[ -t 1 ]] || err "cannot ask for /etc/duckdns.key value as input is not tty"
	local api_key
	IFS='' read -p 'Enter API key for www.duckdns.org: ' api_key
	write_file -m 640 -o root:nobody /etc/duckdns.key "$api_key"
    fi
    local key="$(< /etc/duckdns.key)"
    local url="https://www.duckdns.org/update?domains=dsrv&token=$key&ip="

    multi_user_wants+=(tliset-dyndns.timer)
    pl ''
    p_file '"$1/tliset-dyndns.timer"' "\
[Unit]
After=network-online.target
Wants=network-online.target

[Timer]
Persistent=true
# Each 10 minutes
OnCalendar=*:0/10
"
    p_file '"$1/tliset-dyndns.service"' "\
[Unit]
After=network-online.target
Wants=network-online.target

[Service]
User=nobody
Type=oneshot
ExecStart=/run/tliset/dyndns-update
"
    p_file -x '/run/tliset/dyndns-update' '#!/bin/sh
s="$(/usr/bin/curl -s '"$(escape_for_shell "$url")"')"
printf "curl output: %s\n" "$s" 1>&2
test OK = "$s"
'
}

print_dserver_dnsmasq() {

    local -a dnsmasq_config
    mapfile -t dnsmasq_config <<EOF

interface=$dserver_bridge
#interface=br0
domain-needed
bogus-priv

# for now use Google's services
no-resolv
server=8.8.8.8
server=8.8.4.4

no-hosts
dhcp-range=192.168.2.50,192.168.2.150,6h

address=/dserver/192.168.2.10
address=/dserver.mir2.org/192.168.2.10

dhcp-host=08:60:6E:CD:96:68,192.168.2.2
address=/wifi/192.168.2.2

# Virtual machine needs a stable ip to use with iptables rules
dhcp-host=$mac_kino,$ip_kino
address=/kino/$ip_kino
address=/extra.mir2.org/$ip_kino

dhcp-host=$mac_macbook_air,$ip_macbook_air

# Terentiy's tablet
dhcp-host=$mac_tablet,$ip_tablet

#dhcp-option=option:router,192.168.2.1
EOF

    # For simpler setup convert config into a list of options while
    # stripping spaces, comments and blunk lines and embedd it
    # directly into the unit file.
    local i s=''
    for i in "${dnsmasq_config[@]}"; do
	i="${i## }"
	i="${i%% }"
	i="${i%%#*}"
	if [[ -n "$i" ]]; then
	    s+=" \\$NL    --$i"
	fi
    done

    multi_user_wants+=(tliset-dnsmasq.service)

    pl ''
    p_file '"$1/tliset-dnsmasq.service"' "\
[Unit]
After=network.target

[Service]
ExecStart=/usr/sbin/dnsmasq -k --conf-file=/dev/null$s
"
}

print_fedora_networkd_files() {
    p_file '"$net_dir/zz-default.network"' "\
[Network]
DHCP=ipv4

[DHCP]
UseMTU=true
UseDomains=true
"
}

print_r2_default_net() {
    p_file '"$net_dir/zz-default.network"' "\
[Network]
DHCP=ipv4

Address=2001:41d0:e:696::1/64
Gateway=2001:41d0:e:6ff:ff:ff:ff:ff

[DHCP]
UseMTU=true
UseDomains=true
"
}

print_virtualbox_network() {
    [[ ${#virt_net_ids[@]} -ne 0 ]] || \
	err "virt_net_ids must be non-empty array under virtual box"
    local addresses=""
    for i in "${virt_net_ids[@]}"; do
	addresses+="${addresses:+$NL}Address=192.168.95.$i/24"
    done

    p_file '"$net_dir/99-link-local.network"' "\
[Match]
Name=eth1

[Network]
$addresses
LLMNR=yes
"
    p_file '"$net_dir/9a-default.network"' "\
[Network]
DHCP=yes
LLMNR=no

[DHCP]
UseMTU=yes
UseDNS=no
"
}

install_miranda_network() {

    if [[ -z "$virt" ]]; then
	# TODO use dnsmasq to integrate with VM names
	write_file /etc/NetworkManager/conf.d/99-local.conf <<EOF
[main]
#dns=dnsmasq
EOF
	if let file_update; then
	    cmd_log systemctl restart NetworkManager
	fi
    fi
}

ensure_root_ssh_key() {
    local prefix=$1
    local file=/root/.ssh/$prefix-ed25519
    if [[ ! -s "$file" ]]; then
	cmd_log mkdir -p -m 0700 /root/.ssh
	cmd_log ssh-keygen -t ed25519 -N '' -f "$file"
    fi
    ssh_key_file="$file"
}

setup_kino_password() {
    if ! [[ -f $kino_password_file ]]; then
	(umask 077 && printf '' > "$kino_password_file")
    fi
    if ! [[ -s $kino_password_file ]]; then
	local password
	read -p "Enter password for kino access (it will be echoed): " -r password
	[[ $password ]] || err "password cannot be empty"
	printf '%s\n' "$password" > $kino_password_file 
    fi
    p_file -x "$(escape_for_shell "$ssh_kino_wrap")" "\
#/bin/sh
exec sshpass -f $(escape_for_shell "$kino_password_file") ssh \"\$@\"
"
}

setup_net_mounts() {

    local -a autofs_dirs=()
    if let with_kino_access; then
	autofs_dirs+=(kino)
	setup_kino_password
    fi
    if let with_hippyru_www_access; then
	autofs_dirs+=(bergenrabbit hippyru lubavainfo)
    fi

    let ${#autofs_dirs[@]} || return 0

    local mount_root=/run/tliset/set

    pl "mkdir -p ${autofs_dirs[*]/#/$mount_root/}"

    local s="" dir host host_key_alias host_pubkey port keyfile remote_user remote_dir
    local -A host_set=()
    local known_hosts=""
    for dir in "${autofs_dirs[@]}"; do
	local extra_opt=""
	case "$dir" in
	    bergenrabbit )
		host=bergenrabbit.net
		port=2022
		host_key_alias=bergenrabbit-www
		host_pubkey="$hippyru_www_pubkey"
		keyfile=hippyru-www
		remote_user=bergenrabbit
		remote_dir=/
		;;
	    hippyru )
		host=hippyru.net
		port=2022
		host_key_alias=hippyru-www
		host_pubkey="$hippyru_www_pubkey"
		keyfile=hippyru-www
		remote_user=hippyru
		remote_dir=/
		;;
	    lubavainfo )
		host=lubava.info
		port=2022
		host_key_alias=lubavainfo-www
		host_pubkey="$hippyru_www_pubkey"
		keyfile=hippyru-www
		remote_user=lubavainfo
		remote_dir=/
		;;
	    kino )
		host=media.mir2.org
		port=9092
		host_key_alias=kino
		host_pubkey="$media_pubkey"
		keyfile=
		remote_user=user
		remote_dir=/files
		extra_opt="ssh_command=$ssh_kino_wrap"
		extra_opt+=",max_readahead=1048576"
		;;
	esac

	known_hosts+="$host_key_alias $host_pubkey$NL"
	
	host_set[$host]=1

	local local_user
	case "$NAME" in
	    miranda ) local_user=igor ;;
	    ultrabook ) local_user=lubava ;;
	    untrusted ) local_user=user ;;
	esac

	local opt=""
	opt+="rw,nodev,nosuid,noatime,allow_other,nonempty"
	opt+=",max_read=65536,reconnect,intr"
	opt+=",workaround=all,transform_symlinks,follow_symlinks"
	opt+=",ServerAliveInterval=5,ServerAliveCountMax=2"
	opt+=",CheckHostIP=no"
	opt+=",Port=$port"
	opt+=",Ciphers=aes128-gcm@openssh.com"
	opt+=",MACs=umac-128@openssh.com"
	opt+=",StrictHostKeyChecking=yes"
	opt+=",HostKeyAlias=$host_key_alias"
	opt+=",UserKnownHostsFile=$autofs_ssh_known_hosts"
	opt+=",ControlPath=none"
	if [[ $keyfile ]]; then
	    local ssh_key_file=
	    ensure_root_ssh_key "$keyfile"
	    opt+=",IdentityFile=$ssh_key_file"
	fi
	opt+=",uid=$(id -u "$local_user"),gid=$(id -g "$local_user")"
	opt+="${extra_opt:+,}$extra_opt"

	local mount_dir="$mount_root/$dir"
	local unitname="$(systemd-escape -p "$mount_dir")"
	p_file "\$1/$(printf %q "$unitname.mount")" "\
[Mount]
Where=$mount_dir
Type=fuse.sshfs
What=$remote_user@$host:$remote_dir
Options=$opt
"
	# Using TimeoutIdleSec leads to a hung after network is
	# recovered after first successful mount.
	p_file "\$1/$(printf %q "$unitname.automount")" "\
[Automount]
Where=$mount_dir
#TimeoutIdleSec=30
"
        multi_user_wants+=("$unitname.automount")
    done

    pl ''
    p_file "$autofs_ssh_known_hosts" "$known_hosts"

    if [[ ! -h /set || "$(readlink /set)" != "$mount_root" ]]; then
	cmd_log rm -f /set
	cmd_log ln -s "$mount_root" /set
    fi
}

setup_hippyru_backup() {
    [[ $hippyru_backup_time || $NAME == thip ]] || return 0

    local ssh_key_file=
    ensure_root_ssh_key hippyru-www-backup

    if [[ $NAME == thip ]]; then
	return 0
    fi

    [[ $hippyru_backup_time =~ ^[0-2][0-9]:[0-5][0-9]:[0-5][0-9]$ ]] || \
	err "Invalid backup time spec in hippyru_backup_time - '$hippyru_backup_time'"
    
    p_file '$1/tliset-hippyru-backup.timer' "\
[Unit]
After=network-online.target
Wants=network-online.target

[Timer]
Persistent=true
OnCalendar=$hippyru_backup_time
"
    p_file '$1/tliset-hippyru-backup.service' "\
[Unit]
After=network-online.target
Wants=network-online.target

[Service]
ExecStart=/run/tliset/hippyru-backup
StandardError=journal
StandardOutput=journal
Type=oneshot
"
    multi_user_wants+=("tliset-hippyru-backup.timer")

    # Script source with condition code
    local s='#!/usr/bin/bash
set -e -u -o pipefail

# Number of days to keep old backups in the changed dir
max_keep_changed_days=60 

'
    # On fedora change SELinux context for rsync so it is treated as
    # a binary. As an update can reset it, do it each time before running
    # rsync.
    if let kind_fedora; then
	s+='
se_context=$(stat -c %C /usr/bin/rsync)
if [[ $se_context =~ ^[^:]*:[^:]*:([^:]*):[^:]*$ ]]; then
    if [[ ${BASH_REMATCH[1]} != bin_t ]]; then
        echo "Changing SE context for /usr/bin/rsync from ${BASH_REMATCH[1]} to bin_t" 1>&2
        chcon -t bin_t /usr/bin/rsync 
    fi
fi
'
    fi
    s+='

readonly backup_root="/area/backup"

remove_list=()

backup_from_host() {
    local pod_name="$1" host_name="$2"
    local data="$backup_root/$pod_name"
    local changes="$backup_root/changes/$pod_name"
    local partial="$backup_root/rsync-partial/$pod_name"
    local dir
    for dir in "$data" "$changes" "$partial"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
        fi
    done
    
    local -a ssh_cmd=(
        ssh -l backup -p 2022 -i ~/.ssh/hippyru-www-backup-ed25519 
        -o Ciphers=aes128-gcm@openssh.com
        -o StrictHostKeyChecking=no
    )

    local -a rsync_args=(
        -rlpt
        --no-owner --no-group --omit-dir-times --omit-link-times
        --partial-dir="$partial" --delete-after
        --info=NAME
        --rsh="${ssh_cmd[*]}"
    )

    local too_old_backup="$changes/$(date --date="-20 days" +%Y-%m-%d)"
    rm -rf "$too_old_backup"
    local changed_files
    changed_files="$changes/$(date +%Y-%m-%d)"
    echo "Backing up $pod_name" >&2
    local ok=1
    rsync "${rsync_args[@]}" --backup --backup-dir="$changed_files" \
        "rsync://$host_name/adata/" "$data/adata/" || ok=
    if [[ $ok ]]; then
	local i cur_time
	cur_time="$(date +%s)"
	for i in "$changes"/20[0-9][0-9]-[0-9][0-9]-[0-9][0-9]; do
	    dir_time="$(date --date="${i##*/}" +%s)"
	    if test "$((cur_time-dir_time))" -gt "$((max_keep_changed_days*86400))"; then
		remove_list+=("$i")
	    fi
	done
    fi
    
}

echo "Backing up hippyru-dock source"
src_top="$backup_root/src"
if [[ ! -d $src_top ]]; then
    mkdir "$src_top"
fi

src_dir="$src_top/hippyru-dock"
if [[ ! -d $src_dir ]]; then
    git clone https://github.com/ibukanov/hippyru-dock "$src_dir"
else
    (cd "$src_dir" && git pull)
fi

backup_from_host hippyru hippyru.net
backup_from_host bergenrabbit bergenrabbit.net
backup_from_host lubavainfo lubava.info

if [[ ${#remove_list[@]} -ne 0 ]]; then
    printf -v s "\\n\\t%s" "${remove_list[@]}"
    echo "removing older changes created more than $max_keep_changed_days days ago:$s"
    rm -rf "${remove_list[@]}"
fi

'

    p_file -x '/run/tliset/hippyru-backup' "$s"

    if let kind_fedora; then
	setsebool rsync_client 1
    fi
}

setup_sshd() {
    log "Checking sshd"
    inc_log_level

    # Based on https://stribika.github.io/2015/01/04/secure-secure-shell.htlm
    local sshd_config="\
UsePrivilegeSeparation sandbox

KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
HostKey /etc/ssh/ssh_host_ed25519_key
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

UseDNS no
ClientAliveInterval 180

Subsystem sftp internal-sftp

PubkeyAuthentication yes
PasswordAuthentication no
ChallengeResponseAuthentication no
"
    if let kind_fedora; then
	sshd_config+="GSSAPIAuthentication no$NL"
	sshd_config+="UsePAM yes$NL"
	if [[ $NAME == ultrabook ]]; then
	    sshd_config+="X11Forwarding yes$NL"
	fi
	if [[ -z "$single_ssh_user" ]]; then
	    sshd_config+="AuthorizedKeysFile /etc/ssh/authorized_keys/%u$NL"
	    local f=/etc/ssh/authorized_keys/root
	    if [[ ! -e "$f" ]]; then
		touch "$f"
		chmod 640 "$f"
	    fi
	fi
    fi

    if [[ -n $single_ssh_user ]]; then
	sshd_config+="AllowUsers $single_ssh_user$NL"
	eval "local f=~$single_ssh_user/.ssh/authorized_keys"
	if [[ ! -s $f ]]; then
	    touch "$f"
	    chmod 600 "$f"
	    chown "$single_ssh_user:$single_ssh_user" "$f"
	    err "$f does not exist or empty." \
		"Add a public key there for $NAME access and try again."
	fi
    fi
    
    write_file /etc/ssh/sshd_config "$sshd_config"

    if let sshd_extra_listen_port && let kind_fedora; then
	local re='^ssh_port_t\s\+tcp\s\+%s$'
	if ! semanage port -l -C | grep -q "$(printf "$re" "$sshd_extra_listen_port")"; then
	    cmd_log semanage port -a -t ssh_port_t -p tcp "$sshd_extra_listen_port"
	fi
    fi

    file_update_count=0
    if let kind_fedora; then
	ports=" -o Port=22"
	if let sshd_extra_listen_port; then
	    ports+=" -o Port=$sshd_extra_listen_port"
	fi

	pl 'mkdir -p "$1/sshd.service.d/"'
	p_file '"$1/sshd.service.d/tliset.conf"' "\
[Service]
Environment=\"OPTIONS=-e$ports\"
"
    elif let kind_coreos; then
	if let sshd_extra_listen_port; then
	    pl 'mkdir -p "$1/sshd.socket.d/"'
	    p_file '"$1/sshd.socket.d/tliset.conf"' "\
[Socket]
ListenStream=$sshd_extra_listen_port
"
	fi
    fi

    if let with_enabled_sshd; then
	# On coreos this is enabled by default
	if let kind_fedora; then
	    multi_user_wants+=(sshd.service)
	fi
    else
	if systemctl -q is-enabled sshd; then
	    log "disabling sshd"
	    systemctl disable sshd
	fi
    fi

    if let file_update_count && systemctl -q is-active sshd; then
	log "restarting sshd"
	systemctl restart sshd
    fi

    dec_log_level
}

add_user() {
    local user="$1" id="$2"
    if ! id -u "$user" 2>/dev/null 1>&2; then
	log "creating user name=$user id=$id"
	groupadd -g "$id" "$user"
	useradd -g "$id" -u "$id" "$user"
	passwd -d "$user"
    fi
}

setup_users() {
    log "Checking users"
    inc_log_level
    if [[ "$NAME" == ultrabook || "$NAME" == miranda ]]; then
	add_user lubava 1978
    fi
    if [[ "$NAME" == miranda ]]; then
	add_user igor 1973
	if ! getent group vboxsf >/dev/null ; then
	    cmd_log usermod -a -G vboxsf igor
	fi
    fi
    dec_log_level
}

setup_services() {
    log "Checking services"
    inc_log_level

    setup_net_mounts

    setup_hippyru_backup

    if let kind_fedora; then
	p_mask_service docker.service
    fi

    if let kind_coreos; then
	# Ignore system and user configs
	p_mask_service system-cloudinit@.servive
	p_mask_service user-cloudinit@.servive

	# On CoreOS docker is socket-activated by default which breaks
	# restarting containers on boot unless a docker client runs
	multi_user_wants+=(docker.service)
    fi

    if let with_vol_storage; then
	p_file -x '/run/tliset/mount-vol' "$(cat <<'EOF'
#!/bin/sh
set -e -u
mkdir -p /vol
root_mount="$(grep ' / ' /proc/mounts)"
root_device_prefix="${root_mount%%[0-9]*}"
case "$root_device_prefix" in
    /dev/sda ) device=/dev/sdb ;;
    /dev/vda ) device=/dev/vdb ;;
    * ) echo "Cannot deduce storage device, root_device_prefix='$root_device_prefix' root_mount='$root_mount'" 1>&2; exit 1 ;;
esac

test -b "$device" || { echo "No extra storage" 1>&2; exit 0; }
if ! grep -q "^$device\>" /proc/mounts && ! mount -t ext4 "$device" /vol 2>/dev/null; then
    set -x
    mkfs.ext4 "$device"
    mount -t ext4 "$device" /vol
    set +x
fi
if [[ ! -d /vol/src ]]; then
    set -x
    tmp="$(mktemp -d -p /vol)"
    chmod 755 "$tmp" && chown core:core "$tmp" && mv "$tmp" /vol/src || \
        { rmdir "$tmp"; exit 1; }
    set +x
fi
if [[ ! -d /vol/docker ]]; then
    mkdir -m 755 /vol/docker
fi
mount --bind /vol/docker /var/lib/docker
EOF
)"
	p_file -x '"$1/tliset-mount-vol.service"' "$(cat <<'EOF'
[Unit]
Before=docker.service
[Service]
Type=oneshot
ExecStart=/run/tliset/mount-vol
EOF
)"
	multi_user_wants+=(tliset-mount-vol.service)
    fi

    dec_log_level
}

. "$selfdir/zram-setup"

show_usage=""
NAME=""
remote=""

while getopts :hn:r: opt; do
    case "$opt" in
	h ) show_usage=1 ;;
	n )
	    NAME="$OPTARG"
	    is_valid_host_name "$NAME" || \
		usage_err "The value of -n argument '$NAME' is not a known host name."
	    ;;
	r )
	    remote="$OPTARG"
	    is_valid_host_name "$remote" || \
		usage_err "The value of -n argument '$remote' is not a known host name."
	    ;;
	* ) getopts_err "$opt" "${OPTARG-}";;
    esac
done

#[[ $# -eq $(($OPTIND - 1)) ]] || usage_err "Unexpected extra arguments: $@"
let OPTIND==1+$# || usage_err "Unexpected extra arguments: $@"

[[ -z "$remote" || -z "$NAME" ]] || usage_err "Only one of -n, -r can be given"

if [[ -n "$show_usage" ]]; then
    echo "Usage: $0 [OPTION]..."
    echo "Customize installation for the given computer."
    echo
    echo "  -h  show this help and exit"
    echo "  -n name  assume the given name as the hostname rather than use /etc/hostname."
    echo "           The valid values are (${valid_host_names[*]})."
    echo "  -r name  execute setup on the remote machine name using ssh to copy the setup files."
    echo
    exit
fi

if [[ -n "$remote" ]]; then
    NAME=$remote
elif [[ -z "$NAME" ]]; then
    IFS='' read NAME < /etc/hostname
    if ! is_valid_host_name "$NAME"; then
	err "The content of /etc/hostname is '$NAME' is not a supported name." \
	    "Use -n option to set the hostname explicitly."
    fi
fi

get_host_options

if [[ -n "$remote" ]]; then
    cmd=(run_remotely)
    if [[ -n "$single_ssh_user" ]]; then
	# Use sudo
	cmd+=(-s "$single_ssh_user@$remote")
    else
	cmd+=("root@$remote")
    fi
    "${cmd[@]}" -n "$remote"
fi

if [[ "$(id -u)" -ne 0 ]]; then
    exec sudo "$0" "$@"
fi

if [[ -f /etc/hostname ]]; then
    IFS='' read current_hostname < /etc/hostname
    if is_valid_host_name "$current_hostname" && [ "$NAME" != "$current_hostname" ]; then
	err "Already setup as $current_hostname. To force put localhost into /etc/hostname"
    fi
else
    echo "$NAME" > /etc/hostname
fi

virt="$(systemd-detect-virt -v || true)"
if [[ "$virt" == none ]]; then
    virt=""
fi

if [[ "$virt" == kvm ]]; then
    # systemd detects incorrectly
    if lspci | grep -q VirtualBox; then
	virt=oracle
    fi
fi

if [[ "$virt" == oracle ]]; then
    readonly with_virtual_box_network="1"
else
    readonly with_virtual_box_network="0"
fi

if let with_networkd_if_virt && [[ -n "$virt" ]]; then
    with_networkd=1
    with_resolved=1
fi

if let kind_coreos && ! let with_enabled_sshd; then
    err "On CoreOS sshd must always be enabled"
fi

#if let kind_coreos; then
#    [[ ! -d /media/configdrive && ! -d /media/configvirtfs ]] || \
#	err "Cannot configure CoreOS that under cloudconfig control"
#fi

if let kind_fedora; then
    fedora_release="$(rpm -E %fedora)"
fi

start_generator_write

if [[ ! -d /var/lib/tliset ]]; then
    mkdir -p -m 755 /var/lib/tliset
fi

if let kind_fedora; then
    setup_fstab
    setup_fedora_packages
    setup_grub
fi
if let with_zram; then
    setup_zram
fi
setup_sshd
setup_network
if let kind_fedora; then
    setup_users
fi
setup_services

finish_generator_write
log "Done."
