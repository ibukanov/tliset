#!/bin/bash

set -u
set -e

show_usage=""
NAME=""

tmp_files=()

cleanup() {
    if [[ ${#tmp_files[@]} -ge 1 ]]; then
	rm -f "${tmp_files[@]}"
    fi
}

trap cleanup EXIT

err() {
    printf 'Error: %s\n' "$*" 1>&2
    exit 1
}

usage_err() {
    echo "$0: $@" 1>&2
    echo "Try $0 -h for usage" 1>&2
    exit 1
}

info() {
    printf '%s\n' "$*" 1>&2
}

# return false if file already exists with the given content and modes
write_file() {
    local owner=root:root mode=644 count_mode="" OPTIND opt path body dir tmp

    while getopts cm:o: opt; do
	case "$opt" in
	    m ) mode="$OPTARG";;
	    o ) owner="$OPTARG";;
	    c ) count_mode=1;;
	    * ) err "bad write_file usage";;
	esac
    done
    shift $(($OPTIND - 1))
    [[ $# -ge 1 ]] || err "write_file - missing path argument"
    [[ $# -le 2 ]] || err "write_file - too many arguments"

    path="$1"
    if [[ $# -ge 2 ]]; then
	body="$2"
    else
	body="$(cat)"
    fi

    while true; do
	if [[ ! -f "$path" || -L "$path" ]]; then
	    break;
	fi
	if [[ "$(stat -c %U:%G:%a "$path")" != "${owner}:${mode}" ]]; then
	    break;
	fi

	# Use comm as diff may not be available like in coreos
	if [[ -n "$(comm --nocheck-order -3 "$path" /dev/stdin <<< "$body")" ]]; then
	    break;
	fi

	# No need to write anything
	if [[ -n "$count_mode" ]]; then
	    return 0
	fi
	return 1
    done

    mkdir -p "$(dirname "$path")"

    # Use temporary to ensure atomic operation on filesystem
    tmp="$(mktemp "$path.XXXXXXXXXX")"
    tmp_files+=($tmp)
    if [[ -n "$body" ]]; then
	cat <<< "$body"  > "$tmp"
    fi
    chmod "$mode" "$tmp"
    chown "$owner" "$tmp"
    mv -f "$tmp" "$path"

    if [[ -n "$count_mode" ]]; then
	let written_files_count+=1
    fi
    return 0
}

is_valid_hostname() {
    case "$1" in
	dserver | miranda | ultrabook ) return 0;;
    esac
    return 1;
}

fixup_transgui() {
    local path=/usr/share/applications/transgui.desktop
    local line='MimeType=application/x-bittorrent;x-scheme-handler/magnet;'
    if ! grep -q "^$line\$" "$path" ; then
	info "fixing $path"
	local data="$(cat "$path" | grep -v '^MimeType=')"
	local tmp="$(mktemp "$path.XXXXXXXXXX")"
	tmp_files+=($tmp)
	printf '%s\n%s\n' "$data" "$line" > "$tmp"
	chmod 644 "$tmp"
	mv "$tmp" "$path"
    fi
}


setup_packages() {
    info "Checking packages"

    if ! rpm -q --quiet rpmfusion-free-release rpmfusion-nonfree-release ; then
	info "Installing rpmfusion"
	local rpmfusion=http://download1.rpmfusion.org
	local fedora_release=$(rpm -E %fedora)
	dnf install -y --nogpgcheck \
	    $rpmfusion/free/fedora/rpmfusion-free-release-$fedora_release.noarch.rpm \
	    $rpmfusion/nonfree/fedora/rpmfusion-nonfree-release-$fedora_release.noarch.rpm \
	    || true
    fi
    local list=(
	tmux xfce4-terminal
	git fuse-sshfs unison240 lsyncd
	quilt mercurial subversion
	livecd-tools
	autoconf automake gcc-c++ kernel-devel
	docker-io
	emacs
	tigervnc
	strace

	# filesystems
	autofs udftools inotify-tools fdupes fslint

	# Archives
	unrar libunrar

	# encryption and backup
	apg duplicity perl-Digest-Bcrypt python-gdata

	# hardware management
	rfkill lm_sensors

	# Recovery tools
	ddrescue foremost scalpel testdisk

	# GUI
	gnome-tweak-tool
	nautilus-open-terminal

	# Graphs
	graphviz graphviz-doc

	# Media
	kdenlive vlc gimp inkscape gthumb
	scribus pdfmerge transgui openssl-devel
	evince-djvu pdf2djvu
	linux-libertine-biolinum-fonts linux-libertine-fonts
	gstreamer1-libav
	gstreamer1-plugins-bad-free
	gstreamer1-plugins-bad-free-extras
	gstreamer1-plugins-bad-freeworld
	gstreamer1-plugins-good-extras
	gstreamer1-plugins-ugly

	# Languages
	hunspell-ru hunspell-nb
    )

    case "$NAME" in
	dserver | miranda )
	    list+=(
		libvirt-daemon-config-network
		libvirt-daemon-kvm
		qemu-kvm
		virt-manager
		virt-viewer
	    );;
    esac

    if ! rpm -q --quiet "${list[@]}" ; then
	info "Installing missing packages"
	dnf install -y "${list[@]}"
	printf 'new-session\n' > /etc/tmux.conf
    fi

    if rpm -q --quiet transmission-remote-gtk ; then
	dnf remove -y transmission-remote-gtk
    fi

    systemctl enable autofs
    fixup_transgui
}

setup_fstab() {
    local fstab ids edits id disk
    if [[ "$NAME" == dserver ]]; then
	info "Checking /etc/fstab"

	fstab="$(cat /etc/fstab)"
	# Replace lables/uids with real devices in fstab for security
	# as an untrusted VM will access the whole disk.
	ids=($(egrep -o '^UUID=[A-Fa-f0-9-]+' <<< "$fstab" | cut -d= -f2 ))
	if [[ ${#ids[@]} -ge 1 ]]; then
	    info "replacing UUID with devices for security with untrusted VM"
	    edits=()
	    for id in "${ids[@]}"; do
		[[ -b "/dev/disk/by-uuid/$id" ]] || err "failed to locate disk for uuid=$id"
		disk="/dev/$(basename "$(readlink "/dev/disk/by-uuid/$id")")"
		[[ -b "$disk" && ! -L "$disk" ]] || \
		    err "/dev/disk/by-uuid/$id does not point to real device file"
		edits+=(-e "s|^UUID=$id|$disk|")
	    done
	    fstab="$(sed "${edits[@]}" <<< "$fstab")"
	fi

	fstab="$(sed '/^#custom-start#/,/^#custom-end#/d' <<< "$fstab")"
	fstab+='
#custom-start#
/dev/sda1 /area/backup ext4 noatime,discard
/dev/sda2 /area/kino ext4 noauto,noatime,discard
#custom-end#'

	if write_file /etc/fstab "$fstab"; then
	    info "/etc/fstab was updated"
	fi
	mkdir -p /area/backup
	mkdir -p /area/kino
    fi
}

setup_grub() {
    local key custom_grub_defaults edits grub_defaults_text grub_config
    local -A config
    info "Checking grub"

    config=(
	[GRUB_DEFAULT]=saved
	[GRUB_TIMEOUT]=1
	[GRUB_CMDLINE_LINUX]="rhgb quiet LANG=en_US.UTF-8"
    )

    if [[ "$NAME" == dserver ]]; then
	# Avoid UUID for VM security
	config+=(
	    [GRUB_DISABLE_LINUX_UUID]=true
	)
    fi

    custom_grub_defaults=""
    for key in "${!config[@]}"; do
	custom_grub_defaults+="$(printf '\n%s=%q' "$key" "${config[$key]}")"
    done

    # Ensure stable order
    custom_grub_defaults="$(sort <<< "$custom_grub_defaults")"

    # delete all lines matching config keys and then append the proper values
    edits=()
    for key in "${!config[@]}"; do
	edits+=(-e "/^$key/d")
    done

    grub_defaults_text="$(sed "${edits[@]}" /etc/default/grub)$custom_grub_defaults"

    grub_config=/boot/grub2/grub.cfg
    [[ -f "$grub_config" ]] || grub_config=/boot/efi/EFI/fedora/grub.cfg
    [[ -f "$grub_config" ]] || err "Failed to locate grub.cfg"

    if write_file /etc/default/grub "$grub_defaults_text"; then
	info "updating $grub_config"
	grub2-mkconfig -o "$grub_config"
    fi
}

setup_zram() {
    info "Checking zram"
    echo "SWAP_SIZE=200%" > /etc/sysconfig/zram
    if [[ ! -f /usr/bin/zram-status ]]; then
	info "installing zram support"
	git clone https://github.com/ibukanov/zram-utils.git /tmp/zram-utils
	/tmp/zram-utils/setup install
	rm -rf /tmp/zram-utils
    fi
    if write_file /etc/sysconfig/zram "SWAP_SIZE=200%"; then
	info "enabling zram"
	systemctl enable zram
	systemctl start zram
    fi
}

setup_network() {
    local -A hosts
    local hosts_text key edits
    info "Checking network"

    hosts=(
	[kino]=192.168.2.9
    )

    if [[ "$NAME" != dserver ]]; then
	hosts+=(
	    [dserver]=192.168.2.10
	)
    fi

    hosts_text=""
    for key in "${!hosts[@]}"; do
	hosts_text+="$(printf '\n%s %s' "${hosts[$key]}" "$key")"
    done

    # Ensure stable order
    hosts_text="$(sort <<< "$hosts_text")"

    # delete all lines matching config keys and then append the proper values
    edits=()
    for key in "${!hosts[@]}"; do
	edits+=(-e "/^[0-9.]\\+\\s\\+$key\$/d")
    done

    hosts_text="$(sed "${edits[@]}" /etc/hosts)$hosts_text"

    if write_file /etc/hosts "$hosts_text"; then
	info "updated /etc/hosts"
    fi

    if [[ "$NAME" == dserver ]]; then
	systemctl disable firewalld

	if rpm -q --quiet NetworkManager ; then
	    info "disabling NetworkManager"
	    systemctl disable NetworkManager
	    systemctl stop NetworkManager
	    dnf remove -y NetworkManager
	fi

	written_files_count=0
	write_file -c /etc/systemd/network/80-br0.netdev <<EOF
[NetDev]
Name=br0
Kind=bridge
EOF
	write_file -c /etc/systemd/network/80-br0.network <<EOF
[Match]
Name=br0
[Network]
Address=192.168.2.10/24
Gateway=192.168.2.1
DNS=192.168.2.1
EOF
	write_file -c /etc/systemd/network/80-local.network <<EOF
[Match]
Name=enp4s0
[Network]
Bridge=br0
EOF
	if [[ "$written_files_count" -gt 0 ]]; then
	    info "enabling/updating systemd-networkd config"
	    systemctl enable systemd-networkd
	    systemctl start systemd-networkd
	    systemctl restart systemd-networkd
	fi

	if [[ ! -L /etc/resolv.conf || \
		    "$(readlink /etc/resolv.conf)" != /run/systemd/resolve/resolv.conf ]]; then
	    info "enabling systemd-resolved"
	    systemctl enable systemd-resolved
	    systemctl start systemd-resolved
	    ln -s -f /run/systemd/resolve/resolv.conf /etc/resolv.conf
	fi
    fi

    setup_autofs
}

setup_autofs() {
    local setup_path="$(dirname "$0")/autofs-setup"
    if [[ "$setup_path" -nt /etc/tliset/.installed ]]; then
	local flags=(-u -i)
	if [[ "$NAME" == miranda || "$NAME" == ultrabook ]]; then
	    flags+=(-n)
	fi
	"$setup_path" "${flags[@]}"
	touch /etc/tliset/.installed
    fi
}

setup_ssh() {
    info "Checking ssh"
    mkdir -p -m 0700 /root/.ssh
    case "$NAME" in
	miranda | ultrabook )
	    local mainuser=igor
	    if [[ "$NAME" == ultrabook ]]; then
		mainuser=lubava
	    fi
	    local key_type
	    for key_type in ed25519 rsa; do
		local subpath=".ssh/id_$key_type"
		if [[ ! -f "/root/$subpath" && -e "/home/$mainuser/$subpath" ]]; then
		    info "Linking administrator ssh $key_type as the key for the root user"
		    rm -f "/root/$subpath" "/root/$subpath.pub"
		    ln -s "/home/$mainuser/$subpath" "/root/$subpath"
		    ln -s -f "/home/$mainuser/$subpath.pub" "/root/$subpath.pub"
		fi
	    done
	    ;;
	* )
	    if [[ ! -f /root/.ssh/id_ed25519 ]]; then
		info "Generating ssh key for the root user"
		ssh-keygen -t ed25519 -N '' -f /root/.ssh/id_ed25519
	    fi
	    ;;
    esac

    # Based on https://stribika.github.io/2015/01/04/secure-secure-shell.html
    local sshd_config="
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
HostKey /etc/ssh/ssh_host_ed25519_key
Ciphers chacha20-poly1305@openssh.com,aes256-ctr,aes128-ctr,aes128-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

SyslogFacility AUTHPRIV
AuthorizedKeysFile /etc/ssh/authorized_keys/%u
PasswordAuthentication no
ChallengeResponseAuthentication no
GSSAPIAuthentication no
UsePAM yes
UsePrivilegeSeparation sandbox
UseDNS no
Subsystem sftp /usr/libexec/openssh/sftp-server
"
    local root_authorized_keys="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINuRT02EgmvQdI96X/qGdUCCSUbTHlvRiHuF0BKpNhch igor@localhost.localdomain"

    # Allow root to ssh to self for debugging
    root_authorized_keys+="$(printf '\n%s' "$(cat /root/.ssh/id_ed25519.pub)")"

    if [[ dserver == "$NAME" ]]; then
	if write_file /etc/ssh/sshd_config "$sshd_config"; then
	    info "Updating /etc/ssh/sshd_config"
	    systemctl enable sshd
	    systemctl start sshd
	    systemctl reload sshd
	fi

	if write_file -m 640 /etc/ssh/authorized_keys/root "$root_authorized_keys" ; then
	    info "updated /etc/ssh/authorized_keys/root"
	fi
    fi
}

add_user() {
    local user="$1" id="$2"
    if ! id -u "$user" 2>/dev/null 1>&2; then
	groupadd -g "$id" "$user"
	useradd -g "$id" -u "$id" "$user"
	passwd -d "$user"
    fi
}

setup_users() {
    info "Checking users"
    add_user lubava 1978
    if [[ "$NAME" == dserver ]]; then
	add_user kino 1001
    fi
}

setup_docker() {
    info "Checking docker"
    local config="
[Service]
MountFlags=private
"
    mkdir -p /etc/systemd/system/docker.service.d
    if write_file /etc/systemd/system/docker.service.d/local.conf "$config" ; then
	info "updated /etc/systemd/system/docker.service.d/local.conf"
	systemctl daemon-reload
    fi
    systemctl enable docker
}

while getopts :hn: opt; do
    case "$opt" in
	h ) show_usage=1 ;;
	n )
	    NAME="$OPTARG"
	    is_valid_hostname "$NAME" || \
		usage_err "The value of -n argument '$NAME' is not a known host name."
	    ;;
	\? ) usage_err "option -$OPTARG requires an argument" ;;
	* ) usage_err "unknown -$OPTARG option" ;;
    esac
done
shift $(($OPTIND - 1))

test $# -eq 0 || usage_err "Unexpected extra arguments: $@"

if test -n "$show_usage"; then
    echo "Usage: $0 [OPTION]..."
    echo "Customize installation for the given computer."
    echo
    echo "  -h  show this help and exit"
    echo "  -n name  assume the given name as the hostname rather than use /etc/hostname ."
    echo "           The valid values are dserver, miranda, ultrabook."
    echo
    exit
fi

if [ -z "$NAME" ]; then
    IFS='' read NAME < /etc/hostname
    if ! is_valid_hostname "$NAME"; then
	err "The content of /etc/hostname is '$NAME' is not a supported name." \
	    "Use -n option to set the hostname explicitly."
    fi
else
    IFS='' read current_hostname < /etc/hostname
    if is_valid_hostname "$current_hostname" && [ "$NAME" != "$current_hostname" ]; then
	err "Already setup as $current_hostname. To force put localhost into /etc/hostname"
    fi
    echo "$NAME" > /etc/hostname
fi

setup_fstab
setup_packages
setup_grub
setup_zram
setup_ssh
setup_network
setup_users
setup_docker
