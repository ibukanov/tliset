#!/bin/bash

set -u
set -e

tmp_files=()

ssh_config=/etc/ssh/ssh_config
auto_master=/etc/auto.master.d/tliset.autofs
set_etc=/etc/tliset
auto_map="$set_etc/automap"
ssh_known_hosts="/var/local/sshfs_known_hosts"
sshfs_timeout=60
mount_dir=/set
files_ssh_port=9092

install=
uninstall=
show_usage=
dry_run=
hippyru_net=

cleanup() {
    if [[ ${#tmp_files[@]} -ge 1 ]]; then
	rm -f "${tmp_files[@]}"
    fi
}

trap cleanup EXIT

loop_mount_dirs() {
    local cmd="$1"
    shift 1

    # Call local_dir ssh_host ssh_user remote_path
    "$cmd" "$@" bergenrabbit-photo www.hippyru.net bergenrabbit.net /www/site/bergenrabbit.net/html/photo
    "$cmd" "$@" hippy.ru www.hippyru.net hippy.ru /www/site/hippy.ru/html
    "$cmd" "$@" lubava.info www.hippyru.net lubava.info /www/site/lubava.info/html
    "$cmd" "$@" kino kino-files user /user
}

err() {
    echo "$0: $@" 1>&2
    exit 1
}

usage_err() {
    echo "$0: $@" 1>&2
    echo "Try $0 -h for usage" 1>&2
    exit 1
}

dump_seperator() {
    if test -n "$dry_run"; then
	echo "-----------------------------------------------------------------"
    fi
}

log() {
    if test -n "$dry_run"; then
	echo "$@"
    else
	echo "$@" 1>&2
    fi
}

cmd() {
    local cmd
    cmd="$1"
    shift
    dump_seperator
    log "cmd $cmd $@"
    if test -z "$dry_run"; then
	"$cmd" "$@"
    fi
}



rm_if_empty_dir() {
    local dir
    dir="$1"
    if test -d "$dir"; then
	cmd rmdir --ignore-fail-on-non-empty "$dir"
    else
	dump_seperator
	log "skip rmdir: !test -d $dir"
    fi
}

rm_if_exists() {
    local file="$1"
    if [[ -e "$file" ]]; then
	cmd rm "$file"
    else
	dump_seperator
	log "skip rm: !test -e $file"
    fi
}

# return false if file already exists with the given content and modes
write_file() {
    local owner=root:root mode=644 count_mode="" OPTIND opt path body dir tmp

    while getopts cm:o: opt; do
	case "$opt" in
	    m ) mode="$OPTARG";;
	    o ) owner="$OPTARG";;
	    c ) count_mode=1;;
	    * ) err "bad write_file usage";;
	esac
    done
    shift $(($OPTIND - 1))
    [[ $# -ge 1 ]] || err "write_file - missing path argument"
    [[ $# -le 2 ]] || err "write_file - too many arguments"

    path="$1"
    if [[ $# -ge 2 ]]; then
	body="$2"
    else
	body="$(cat)"
    fi

    dump_seperator
    log "write_file $owner $mode $path"
    if [[ -n "$dry_run" ]]; then
	[[ -z "$body" ]] || cat <<< "$body"
	return 0
    fi

    while true; do
	if [[ ! -f "$path" || -L "$path" ]]; then
	    break;
	fi
	if [[ "$(stat -c %U:%G:%a "$path")" != "${owner}:${mode}" ]]; then
	    break;
	fi

	if [[ -z "$body" ]]; then
	    if [[ "$(stat -c %s "$path")" -ne 0 ]]; then
		break;
	    fi
	else
	    # Use comm as diff may not be available like in coreos
	    if [[ -n "$(comm --nocheck-order -3 "$path" /dev/stdin <<< "$body")" ]]; then
		break;
	    fi
	fi

	# No need to write anything
	info "skipping update of a file with identical content, ownership and permissions"
	if [[ -n "$count_mode" ]]; then
	    return 0
	fi
	return 1
    done

    mkdir -p "$(dirname "$path")"

    # Use temporary to ensure atomic operation on filesystem
    tmp="$(mktemp "$path.XXXXXXXXXX")"
    tmp_files+=($tmp)
    if [[ -n "$body" ]]; then
	cat <<< "$body"  > "$tmp"
    fi
    chmod "$mode" "$tmp"
    chown "$owner" "$tmp"
    mv -f "$tmp" "$path"

    if [[ -n "$count_mode" ]]; then
	let written_files_count+=1
    fi
    return 0
}

print_sshfs_dir() {
    local dir="$1" host="$2" user="$3" remote_dir="$4" s

    if [[ -z "$hippyru_net" ]]; then
	case "$host" in
	    www.hippyru.net|hippyru.net ) return 0 ;;
	esac
    fi

    s="-fstype=fuse.sshfs"
    s+=",rw,nodev,nosuid,noatime,allow_other,nonempty"
    s+=",max_read=65536,reconnect,intr"
    s+=",workaround=all,transform_symlinks,follow_symlinks"
    s+=",uid=\$UID,gid=\$GID"
    s+=",ServerAliveInterval=5,ServerAliveCountMax=2"
    s+=",StrictHostKeyChecking=no"
    s+=",UserKnownHostsFile=$ssh_known_hosts"
    s+=",ControlPath=none"
    printf '%s %s %s\n' "$mount_dir/$dir" "$s" "${user}@${host}:$remote_dir"
}

create_ssh_config() {
    if [[ ! -f "$ssh_config.orig" ]]; then
	cmd mv "$ssh_config" "$ssh_config.orig"
    fi

    # In ssh that comes with Fedora 20 Match block is not supported. 
    local match=""
    if ! ssh -V 2>&1 | grep -q ^OpenSSH_6.4; then
	match="\
Match originalhost kino-files exec $set_etc/is-outside-home-net
  HostName dsrv.duckdns.org
"
    fi

    write_file "$ssh_config" <<EOF
$match
Host kino-files
  HostKeyAlias kino-files
  AddressFamily inet
  CheckHostIP no
  Port $files_ssh_port
  HostName kino
  User user
  Ciphers aes128-gcm@openssh.com

Host dserver
  HostKeyAlias dserver
  AddressFamily inet
  CheckHostIP no
  Ciphers aes128-gcm@openssh.com

Host www.hippyru.net
  AddressFamily inet
  CheckHostIP no
  Port 2022
  Ciphers aes128-gcm@openssh.com

Host *
  GSSAPIAuthentication no
  SendEnv LANG
EOF
}

write_helper_utils() {
    write_file -m 755 "$set_etc/is-online" <<'EOF'
#!/bin/bash
status="$(nmcli -f STATE -t g)"
[[ "$status" == connected || "$status" == "connected (site only)" ]]
EOF

    write_file -m 755 "$set_etc/is-outside-home-net" <<'EOF'
#!/bin/bash
! grep -q '^nameserver[[:space:]]\+192.168.2.1$' /etc/resolv.conf
EOF
}

setup_transmission_redirect() {
    write_file /etc/systemd/system/transmission-homenet.socket <<EOF
[Socket]
ListenStream=127.0.0.1:$files_ssh_port
Accept=true

EOF

    write_file /etc/systemd/system/transmission-homenet@.service <<EOF
[Unit]
Requires=transmission-homenet.socket

[Service]
ExecStart=/usr/bin/ssh -W127.0.0.1:9080 \
  -o StrictHostKeyChecking=no -o UserKnownHostsFile=$ssh_known_hosts \
  kino-files
StandardInput=socket

EOF
    write_file -m 755 /etc/NetworkManager/dispatcher.d/90-online-monitor <<EOF
#!/bin/bash
if $set_etc/is-online; then
    systemctl start transmission-homenet.socket
else
    systemctl stop transmission-homenet.socket
fi
EOF
}

do_install() {
    create_ssh_config
    cmd install -m 755 -d "$set_etc" "$mount_dir"

    write_file "$auto_master" "/- file:$auto_map --timeout=$sshfs_timeout"

    loop_mount_dirs print_sshfs_dir | write_file "$auto_map"

    write_file "$ssh_known_hosts" ""

    write_helper_utils
    
    setup_transmission_redirect

    cmd systemctl daemon-reload
    if "$set_etc/is-online"; then
	cmd systemctl start transmission-homenet.socket
    fi
    cmd systemctl restart autofs
    cmd systemctl enable NetworkManager-dispatcher
}

remove_mount_dir() {
    # $2-$4 are ignored
    rm_if_empty_dir "$mount_dir/$1"
}

do_uninstall() {
    local i
    if test -f "$ssh_config.orig"; then
	cmd mv -f "$ssh_config.orig" "$ssh_config"
    fi
    rm_if_exists "$auto_map"
    rm_if_exists "$auto_master"

    cmd systemctl restart autofs

    rm_if_exists "$ssh_known_hosts"
    loop_mount_dirs remove_mount_dir
    rm_if_empty_dir "$mount_dir"

    if [[ -e /etc/systemd/system/transmission-homenet.socket ]]; then
	cmd systemctl stop transmission-homenet.socket
    fi
    rm_if_exists /etc/systemd/system/transmission-homenet.socket
    rm_if_exists /etc/systemd/system/transmission-homenet@.service

    rm_if_exists /etc/NetworkManager/dispatcher.d/90-online-monitor
    rm_if_exists "$set_etc/is-online"
    rm_if_exists "$set_etc/is-outside-home-net"
    rm_if_empty_dir "$set_etc"
}

while getopts :dihnu opt; do
    case "$opt" in
	d ) dry_run=1 ;;
	i ) install=1 ;;
	h ) show_usage=1 ;;
	n ) hippyru_net=1 ;;
	u ) uninstall=1 ;;
	\? ) usage_err "option -$OPTARG requires an argument" ;;
	* ) usage_err "unknown -$OPTARG option" ;;
    esac
done
shift $(($OPTIND - 1))

test $# -eq 0 || usage_err "Unexpected extra arguments: $@"

if test -n "$show_usage"; then
    echo "Usage: $0 [OPTION]..."
    echo "Install or uninstall automount config for the home network."
    echo
    echo "  -d  dump to stdout actions to be performed without changing anything"
    echo "  -h  show this help and exit"
    echo "  -i  install automount config"
    echo "  -n  install hippyru.net-related folders"
    echo "  -u  uninstall automount config"
    echo
    echo "If neither -i nor -u is given, behave as if run with -i -d. If both -u and -i are given, run uninstall and then install."
    exit
fi

if test -z "$install" -a -z "$uninstall"; then
    dry_run=1
    install=1
fi

if test -n "$uninstall"; then
    do_uninstall
fi

if test -n "$install"; then
    do_install
fi
